import logging, asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from app.config import TELEGRAM_TOKEN, ADMIN_IDS
from app.roles import ROLES, DEMO_USERS
from app import db as dbm
from sqlalchemy import select, update
from sqlalchemy.exc import NoResultFound

logging.basicConfig(level=logging.WARNING)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# --- helpers ---
async def get_session():
    async with dbm.SessionLocal() as session:
        yield session

async def init_db():
    async with dbm.engine.begin() as conn:
        await conn.run_sync(dbm.Base.metadata.create_all)
        # preload demo users if not exist
        result = await conn.execute(select(dbm.User))
        if result.first() is None:
            for u in DEMO_USERS:
                await conn.execute(
                    dbm.User.__table__.insert().values(
                        login=u["login"], password=u["password"], role=u["role"]
                    )
                )
            await conn.commit()

async def send_notification(tg_id: int, text: str):
    try:
        await bot.send_message(chat_id=tg_id, text=text)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {tg_id}: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∏—Ç–µ–ª—è–º (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞)
async def notify_teachers(text: str):
    async with dbm.SessionLocal() as session:
        result = await session.execute(select(dbm.User).where(dbm.User.role == "teacher", dbm.User.tg_id != None))
        for user in result.scalars():
            await send_notification(user.tg_id, text)

@dp.message(Command('start'))
async def cmd_start(message: Message):
    tg_id = message.from_user.id
    if tg_id in ADMIN_IDS:
        async for session in get_session():
            user_obj = await session.scalar(select(dbm.User).where(dbm.User.tg_id == tg_id))
            if not user_obj:
                # —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –Ω–µ—Ç
                from app.db import User
                admin_user = User(login=f"admin_{tg_id}", password="", role="admin", tg_id=tg_id, used=True)
                session.add(admin_user)
                await session.commit()
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton(text="üìù –í—Å–µ –∑–∞–º–µ—Ç–∫–∏")],
                [KeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton(text="üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="üìÇ –§–∞–π–ª—ã")],
                [KeyboardButton(text="üó≥ –û–ø—Ä–æ—Å—ã"), KeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ")],
                [KeyboardButton(text="üí¨ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ"), KeyboardButton(text="ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫")]
            ], resize_keyboard=True
        )
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ—Ä–æ–≥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üå∏\n\n–í—ã ‚Äî —Å–µ—Ä–¥—Ü–µ –Ω–∞—à–µ–π —à–∫–æ–ª—ã! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏, –ø–æ–º–æ–≥–∞—Ç—å –∫–æ–ª–ª–µ–≥–∞–º –∏ –¥–µ–ª–∞—Ç—å –º–∏—Ä —á—É—Ç—å –¥–æ–±—Ä–µ–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:",
            reply_markup=kb
        )
        return
    async for session in get_session():
        user_obj = await session.scalar(select(dbm.User).where(dbm.User.tg_id == tg_id))
        if user_obj:
            await message.answer(f"–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {ROLES[user_obj.role]}. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
            return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")

@dp.message(F.text & ~F.text.startswith('/'))
async def auth_or_commands(message: Message):
    tg_id = message.from_user.id
    if tg_id in ADMIN_IDS:
        text = message.text
        if text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —à–∫–æ–ª—ã! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
        elif text == "üìù –í—Å–µ –∑–∞–º–µ—Ç–∫–∏":
            await message.answer("–í–æ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
        elif text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
            await message.answer("–í–æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await message.answer("–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
        elif text == "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await message.answer("–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
        elif text == "üìÇ –§–∞–π–ª—ã":
            await message.answer("–í–æ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
        elif text == "üó≥ –û–ø—Ä–æ—Å—ã":
            await message.answer("–í–æ—Ç –≤—Å–µ –æ–ø—Ä–æ—Å—ã! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
        elif text == "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ":
            await message.answer("–í–æ—Ç –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
        elif text == "üí¨ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ":
            await message.answer("–í–æ—Ç —á–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–±—Ä–∞–Ω–∏—è! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
        elif text == "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫":
            await message.answer("–Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ. –í—ã ‚Äî –ª—É—á—à–∏–π –∞–¥–º–∏–Ω! üå∑")
        return
    async for session in get_session():
        user_obj = await session.scalar(select(dbm.User).where(dbm.User.tg_id == tg_id))
        if not user_obj:
            # assume waiting for login or password
            state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
            data = await state.get_data()
            if "login" not in data:
                await state.update_data(login=message.text.strip())
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            else:
                login = data["login"]
                password = message.text.strip()
                try:
                    user = await session.scalar(
                        select(dbm.User).where(dbm.User.login == login, dbm.User.password == password)
                    )
                    if not user or user.used:
                        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
                        await state.clear()
                        return
                    await session.execute(
                        update(dbm.User)
                        .where(dbm.User.id == user.id)
                        .values(tg_id=tg_id, used=True)
                    )
                    await session.commit()
                    await state.clear()
                    await message.answer(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –í–∞—à–∞ —Ä–æ–ª—å: {ROLES[user.role]}. –ù–∞–ø–∏—à–∏—Ç–µ /help.")
                except NoResultFound:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                    await state.clear()
            return
        # user is authenticated, process simple commands
        text = message.text.strip().lower()
        if text == "–ø—Ä–∏–≤–µ—Ç":
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        else:
            await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏—Ç–µ /help.")

@dp.message(Command('help'))
async def cmd_help(message: Message):
    tg_id = message.from_user.id
    async for session in get_session():
        user_obj = await session.scalar(select(dbm.User).where(dbm.User.tg_id == tg_id))
    if not user_obj:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return
    role = user_obj.role
    if role == "teacher":
        await message.answer("/add_note <—É—á–µ–Ω–∏–∫> <—Ç–µ–∫—Å—Ç> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n/my_notes ‚Äì –º–æ–∏ –∑–∞–º–µ—Ç–∫–∏")
    elif role in ("admin","director"):
        await message.answer("/all_notes ‚Äì –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n/users ‚Äì —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–µ–º–æ.")

@dp.message(Command('add_note'))
async def cmd_add_note(message: Message):
    tg_id = message.from_user.id
    async for session in get_session():
        user_obj = await session.scalar(select(dbm.User).where(dbm.User.tg_id == tg_id))
        if not user_obj or user_obj.role != "teacher":
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é.")
            return
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("–§–æ—Ä–º–∞—Ç: /add_note <—É—á–µ–Ω–∏–∫> <—Ç–µ–∫—Å—Ç>")
            return
        student, text = parts[1], parts[2]
        # for demo, just echo
        await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {student} ‚Äì {text}")

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
