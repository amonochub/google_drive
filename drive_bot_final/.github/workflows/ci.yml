name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt
        
    - name: Run Black formatter check
      run: black --check --diff --line-length 120 .
      
    - name: Run isort import sorting check
      run: isort --check-only --diff --profile black .
      
    - name: Run flake8 linting
      run: flake8 --max-line-length=120 --extend-ignore=E203,W503 .
      
    - name: Run mypy type checking
      run: mypy app/ --ignore-missing-imports
      
    - name: Security scan with bandit
      run: bandit -r app/ -f json -o bandit-report.json || true
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-rus tesseract-ocr-eng poppler-utils
        
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run tests with coverage
      env:
        REDIS_DSN: redis://localhost:6379/0
        BOT_TOKEN: dummy_token_for_tests
        GOOGLE_CLIENT_ID: dummy_client_id
        GOOGLE_CLIENT_SECRET: dummy_client_secret
        GOOGLE_REFRESH_TOKEN: dummy_refresh_token
        GOOGLE_DRIVE_ROOT_FOLDER: dummy_folder_id
        HEAVY_PDF_MB: 20
        CACHE_TTL: 45
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term-missing -v
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t google-drive-bot:test .
        
    - name: Test Docker image
      run: |
        docker run --rm google-drive-bot:test python -c "import app; print('Import successful')"

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy notification
      run: |
        echo "üöÄ Deploying to production..."
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–µ–ø–ª–æ—è
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ SSH, Docker Registry, Kubernetes –∏ —Ç.–¥.
        
    - name: Health check
      run: |
        echo "‚úÖ Health check passed"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ 