import asyncio
import datetime as dt
import decimal
import xml.etree.ElementTree as ET
from dataclasses import dataclass
from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from celery import Celery
import structlog
log = structlog.get_logger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
from app.config import settings

router = Router()

celery_app = Celery(
    "calc_tasks",
    broker=settings.REDIS_DSN,
    backend=settings.REDIS_DSN
)

CBR_URL = "https://www.cbr.ru/scripts/XML_daily.asp?date_req={for_date}"
ISO2CBR = {"USD": "R01235", "EUR": "R01239", "CNY": "R01375"}

async def fetch_cbr_rate(currency: str, for_date: dt.date) -> decimal.Decimal | None:
    url = CBR_URL.format(for_date=for_date)
    import aiohttp
    async with aiohttp.ClientSession() as session:
        async with session.get(url, timeout=10) as resp:
            if resp.status != 200:
                return None
            xml_text = await resp.text()
    tree = ET.fromstring(xml_text)
    valute = tree.find(f".//Valute[@ID='{ISO2CBR[currency]}']")
    if valute is None:
        return None
    value = valute.find("Value").text.replace(",", ".")
    nominal = int(valute.find("Nominal").text)
    return decimal.Decimal(value) / nominal

async def safe_fetch_rate(currency: str, date: dt.date) -> decimal.Decimal | None:
    import logging, aiohttp
    try:
        rate = await fetch_cbr_rate(currency, date)
        if rate is None:
            log.warning("cbr_rate_not_found", currency=currency, date=str(date))
        return rate
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        log.error("cbr_fetch_failed", currency=currency, date=str(date), error=str(e))
        return None

def result_message(currency, rate, amount, commission_pct):
    rub_sum = (amount * rate).quantize(decimal.Decimal("0.01"))
    fee = (rub_sum * commission_pct / 100).quantize(decimal.Decimal("0.01"))
    total = (rub_sum + fee).quantize(decimal.Decimal("0.01"))
    return (
        f"üìä <b>–†–∞—Å—á—ë—Ç</b>\n"
        f"–ö—É—Ä—Å –¶–ë {currency} ‚Üí ‚ÇΩ: <b>{rate}</b>\n"
        f"–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: <b>{amount} {currency}</b>\n"
        f"–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö: <b>{rub_sum} ‚ÇΩ</b>\n"
        f"–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ ({commission_pct}%): <b>{fee} ‚ÇΩ</b>\n"
        f"üßÆ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total} ‚ÇΩ</b>"
    )

class CalcStates(StatesGroup):
    choosing_day = State()
    choosing_currency = State()
    entering_amount = State()
    entering_commission = State()
    waiting_tomorrow_rate = State()

@dataclass
class CalcData:
    for_tomorrow: bool = False
    currency: str | None = None
    amount: decimal.Decimal | None = None
    commission: decimal.Decimal | None = None

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÇ –û–±–∑–æ—Ä –ø–∞–ø–æ–∫")],
        [KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")],
        [KeyboardButton(text="ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò")],
        [KeyboardButton(text="üí∞ –†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")],
    ],
    resize_keyboard=True
)

day_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="calc_today")],
        [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="calc_tomorrow")],
    ]
)

currency_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üá™üá∫ EUR", callback_data="cur_EUR"),
            InlineKeyboardButton(text="üá∫üá∏ USD", callback_data="cur_USD"),
            InlineKeyboardButton(text="üá®üá≥ CNY", callback_data="cur_CNY"),
        ]
    ]
)

@router.message(F.text == "üí∞ –†–∞—Å—á—ë—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
async def calc_menu_start(msg: Message, state: FSMContext):
    await state.set_state(CalcStates.choosing_day)
    await state.update_data(data=CalcData().__dict__)
    await msg.answer(
        "–ó–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥?\n\n"
        "üëà –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        reply_markup=day_kb
    )

@router.callback_query(F.data.startswith("calc_"))
async def process_day(cb: CallbackQuery, state: FSMContext):
    pick = cb.data.split("_")[1]  # today / tomorrow
    data = (await state.get_data()) or {}
    data.update(for_tomorrow=(pick == "tomorrow"))
    await state.update_data(**data)
    await state.set_state(CalcStates.choosing_currency)
    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Ä–∞—Å—á—ë—Ç–∞ üëá",
        reply_markup=currency_kb
    )
    await cb.answer()

@router.callback_query(F.data.startswith("cur_"))
async def process_currency(cb: CallbackQuery, state: FSMContext):
    currency = cb.data.split("_")[1]
    data = await state.get_data()
    data["currency"] = currency
    await state.update_data(**data)
    await state.set_state(CalcStates.entering_amount)
    await cb.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ <b>{currency}</b> (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)."
    )
    await cb.answer()

@router.message(CalcStates.entering_amount)
async def input_amount(msg: Message, state: FSMContext):
    try:
        amount = decimal.Decimal(msg.text.replace(",", "."))
        assert amount > 0
    except Exception:
        return await msg.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üòä")
    data = await state.get_data()
    data["amount"] = amount
    await state.update_data(**data)
    await state.set_state(CalcStates.entering_commission)
    await msg.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 3.5)",
    )

@router.message(CalcStates.entering_commission)
async def input_commission(msg: Message, state: FSMContext):
    try:
        pct = decimal.Decimal(msg.text.replace(",", "."))
        assert pct >= 0
    except Exception:
        return await msg.reply("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â• 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    data = await state.get_data()
    data["commission"] = pct
    await state.update_data(**data)

    if data["for_tomorrow"]:
        tomorrow = dt.date.today() + dt.timedelta(days=1)
        rate = await safe_fetch_rate(data["currency"], tomorrow)
        if rate:
            await msg.answer(
                result_message(data["currency"], rate, data["amount"], pct),
                reply_markup=main_kb
            )
            return await state.clear()
        await msg.answer(
            "–ö—É—Ä—Å –¶–ë –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ–∫–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω üôà\n"
            "–Ø –ø—Ä–∏—à–ª—é —Ä–∞—Å—á—ë—Ç —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è!",
            reply_markup=main_kb
        )
        await state.set_state(CalcStates.waiting_tomorrow_rate)
        celery_app.send_task(
            "calc_tasks.wait_rate_and_notify",
            kwargs={
                "chat_id": msg.chat.id,
                "currency": data["currency"],
                "amount": str(data["amount"]),
                "commission": str(pct),
            },
        )
        return
    today = dt.date.today()
    rate = await safe_fetch_rate(data["currency"], today)
    if rate is None:
        await msg.answer("–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∫—É—Ä—Å –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return await state.clear()
    await msg.answer(
        result_message(data["currency"], rate, data["amount"], pct),
        reply_markup=main_kb
    )
    await state.clear()

@celery_app.task(name="calc_tasks.wait_rate_and_notify", bind=True, max_retries=None)
def wait_rate_and_notify(self, chat_id: int, currency: str, amount: str, commission: str):
    import asyncio
    loop = asyncio.get_event_loop()
    async def _run():
        amt = decimal.Decimal(amount)
        pct = decimal.Decimal(commission)
        tomorrow = dt.date.today() + dt.timedelta(days=1)
        while True:
            rate = await fetch_cbr_rate(currency, tomorrow)
            if rate:
                await bot.send_message(
                    chat_id,
                    result_message(currency, rate, amt, pct),
                    reply_markup=main_kb
                )
                break
            await asyncio.sleep(300)
    return loop.run_until_complete(_run()) 