from __future__ import annotations

import asyncio
from aiogram import Router, F
from aiogram.types import (
    Message,
    FSInputFile,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pathlib import Path
from typing import Dict, List, Optional
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import tempfile
from collections import defaultdict
from dataclasses import dataclass
import time
from datetime import datetime
import os
import structlog
log = structlog.get_logger(__name__)

router = Router(name="upload")

class FilenameWizard(StatesGroup):
    principal = State()
    agent = State()
    doctype = State()
    number = State()
    date = State()
    confirm = State()


# –£–¥–∞–ª—è—é –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CACHE_TTL, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è settings.cache_ttl
VALID_BATCH_LIMIT = 15
user_batches = defaultdict(list)  # user_id -> [FileInfo]
user_batch_tasks = {}  # user_id -> asyncio.Task

@dataclass
class FileInfo:
    file_id: str
    orig_name: str
    guessed: FilenameInfo | None
    status: str  # 'ok' | 'need_wizard'


from app.utils.filename_parser import parse_filename, FilenameInfo
from app.services import gdrive_handler
from app.config import settings
from app.services.drive import upload_file
from app.services.ocr import run_ocr
from app.services.analyzer import extract_parameters
from app.utils.buffers import add_file, get_batch, flush_batch, get_size, set_ttl
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from app.services.drive import ensure_folders
from app.services.autocomplete_service import AutocompleteService
from app.utils.telegram_utils import escape_markdown
from app.utils.file_validation import validate_file, FileValidationError

@dataclass
class UploadResult:
    orig_name: str
    file_id: Optional[str]
    drive_link: Optional[str]
    status: str  # 'success' | 'failed' | 'manual'
    error: Optional[str] = None

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∞–ø–æ–∫ Google Drive ---
async def list_drive_folders(parent_id: str):
    from app.services.drive import drive, run_sync, FOLDER_MIME
    q = f"'{parent_id}' in parents and mimeType = '{FOLDER_MIME}' and trashed = false"
    res = await run_sync(drive.files().list(q=q, spaces="drive", fields="files(id,name)").execute)
    return res.get("files", [])

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ ---
def build_folder_keyboard(folders, current_id, path):
    kb = InlineKeyboardBuilder()
    for f in folders:
        kb.button(text=f["name"], callback_data=f"choose_folder:{f['id']}:{'|'.join(path+[f['name']])}")
    if len(path) > 1:
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"choose_folder_back:{current_id}:{'|'.join(path[:-1])}")
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É", callback_data=f"create_folder:{current_id}:{'|'.join(path)}")
    kb.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –ø–∞–ø–∫—É", callback_data=f"choose_folder_select:{current_id}:{'|'.join(path)}")
    return kb.as_markup()

# --- Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Ä–µ–≤–∞ –ø–∞–ø–æ–∫ ---
@router.callback_query(F.data.startswith("choose_folder"))
async def choose_folder_callback(cb: CallbackQuery, state: FSMContext):
    data = cb.data.split(":", 2)
    action = data[0]
    folder_id = data[1]
    path = data[2].split("|") if len(data) > 2 else []
    if action == "choose_folder":
        folders = await list_drive_folders(folder_id)
        kb = build_folder_keyboard(folders, folder_id, path)
        breadcrumb = " / ".join(path)
        await cb.message.edit_text(f"üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É</b>\n–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: <code>{breadcrumb}</code>", parse_mode="HTML", reply_markup=kb)
    elif action == "choose_folder_back":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
        parent_path = path[:-1]
        parent_id = settings.gdrive_root_folder if not parent_path else await ensure_folders(parent_path)
        folders = await list_drive_folders(parent_id)
        kb = build_folder_keyboard(folders, parent_id, parent_path)
        breadcrumb = " / ".join(parent_path)
        await cb.message.edit_text(f"üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É</b>\n–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: <code>{breadcrumb}</code>", parse_mode="HTML", reply_markup=kb)
    elif action == "choose_folder_select":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –≤ state –∏ –∂–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        await state.update_data(selected_folder_id=folder_id, selected_folder_path=path)
        await cb.message.edit_text(f"‚úÖ –ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: <code>{' / '.join(path)}</code>\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.", parse_mode="HTML")
    await cb.answer()

@router.callback_query(F.data.startswith("create_folder"))
async def create_folder_callback(cb: CallbackQuery, state: FSMContext):
    data = cb.data.split(":", 2)
    parent_id = data[1]
    path = data[2].split("|") if len(data) > 2 else []
    await state.update_data(create_folder_parent_id=parent_id, create_folder_path=path)
    await cb.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ –≤ <code>{' / '.join(path)}</code>:", parse_mode="HTML")
    await state.set_state("waiting_for_new_folder_name")
    await cb.answer()

@router.message()
async def handle_new_folder_name(msg: Message, state: FSMContext):
    data = await state.get_data()
    if state and data.get("create_folder_parent_id") and state.state == "waiting_for_new_folder_name":
        from app.services.drive import drive, run_sync
        parent_id = data["create_folder_parent_id"]
        folder_name = msg.text.strip()
        body = {"name": folder_name, "mimeType": "application/vnd.google-apps.folder", "parents": [parent_id]}
        res = await run_sync(drive.files().create(body=body, fields="id").execute)
        new_folder_id = res["id"]
        # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è ‚Äî —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        path = data["create_folder_path"] + [folder_name]
        folders = await list_drive_folders(new_folder_id)
        kb = build_folder_keyboard(folders, new_folder_id, path)
        await msg.answer(f"–ü–∞–ø–∫–∞ <b>{folder_name}</b> —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞!", parse_mode="HTML", reply_markup=kb)
        await state.clear()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤—Ä—É—á–Ω—É—é –ø–∞–ø–∫—É ---
@router.message(F.document)
async def handle_manual_upload(msg: Message, state: FSMContext):
    data = await state.get_data()
    if data and data.get("selected_folder_id"):
        doc = msg.document
        import tempfile, os, pathlib
        file_path = None
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{doc.file_name if doc.file_name else ''}") as tmp:
                file_path = tmp.name
                await msg.bot.download(doc.file_id, destination=tmp.name)
            from app.services.drive import drive, run_sync
            filename = pathlib.Path(file_path).name
            media_body = None
            with open(file_path, "rb") as f:
                import io
                from googleapiclient.http import MediaIoBaseUpload
                media_body = MediaIoBaseUpload(f, mimetype="application/octet-stream", resumable=True)
                body = {"name": filename, "parents": [data["selected_folder_id"]]}
                res = await run_sync(drive.files().create(body=body, media_body=media_body, fields="id").execute)
                file_id = res["id"]
            drive_link = f"https://drive.google.com/file/d/{file_id}/view"
            await msg.answer(f"‚úÖ –§–∞–π–ª <b>{filename}</b> –∑–∞–≥—Ä—É–∂–µ–Ω! <a href=\"{drive_link}\">–û—Ç–∫—Ä—ã—Ç—å</a>", parse_mode="HTML", disable_web_page_preview=True)
        finally:
            if file_path and os.path.exists(file_path):
                os.unlink(file_path)
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é
        await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=None)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers


async def send_error(msg: Message, text: str) -> None:
    await msg.reply(f"‚ùå {text}\n–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üôÇ")


def _build_duplicate_kb(link: str, manual_cb: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π", url=link))
    kb.row(InlineKeyboardButton(text="üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –≤—Ä—É—á–Ω—É—é", callback_data=manual_cb))
    return kb.as_markup()


# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è HTML/Markdown ---
def escape_html(text: str) -> str:
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ escape_html/escape_markdown –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≥–¥–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏–ª–∏ —Å—Å—ã–ª–∫–∏.


def build_batch_summary(batch: list[FileInfo]) -> tuple[str, InlineKeyboardMarkup]:
    lines = [f"<b>üìã –ù–∞–π–¥–µ–Ω–æ {len(batch)} —Ñ–∞–π–ª–æ–≤:</b>", "<pre>‚Ññ  –ë—ã–ª–æ ‚ûú –°—Ç–∞–Ω–µ—Ç</pre>"]
    problem_idx = []
    for idx, fi in enumerate(batch, start=1):
        ext = fi.orig_name.split('.')[-1] if fi.orig_name and '.' in fi.orig_name else ''
        if fi.guessed:
            new_name = f"{fi.guessed.principal}_{fi.guessed.agent or ''}_{fi.guessed.doctype}_{fi.guessed.number}_{fi.guessed.date}.{ext}"
            lines.append(f"<pre>{idx:2} {fi.orig_name} ‚ûú {new_name}</pre>")
        else:
            lines.append(f"<pre>{idx:2} {fi.orig_name} ‚ûú ‚ö†Ô∏è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ</pre>")
            problem_idx.append(idx)
    kb = InlineKeyboardBuilder()
    kb.button(text=f"‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å {len(batch) - len(problem_idx)} —Ñ–∞–π–ª–æ–≤", callback_data="bulk_upload")
    if problem_idx:
        kb.button(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="fix")
    kb.button(text="‚èπ –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    kb.adjust(1)
    return "\n".join(lines), kb.as_markup()

async def flush_and_ask(user_id: int, bot):
    batch = user_batches.pop(user_id, [])
    if not batch:
        return
    text, markup = build_batch_summary(batch)
    await bot.send_message(user_id, text, reply_markup=markup, parse_mode="HTML")

# --- CALLBACK HANDLERS ---
@router.callback_query(F.data == "cancel")
async def cb_cancel(call: CallbackQuery):
    user_batches.pop(call.from_user.id, None)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ call –∏ call.message –ø–µ—Ä–µ–¥ edit_text
    if call is not None and hasattr(call, 'message') and hasattr(call.message, 'edit_text'):
        await call.message.edit_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await call.answer()

@router.callback_query(F.data == "bulk_upload")
async def cb_upload(call: CallbackQuery, state: FSMContext = None):
    from app.services.drive import upload_file, ensure_folders
    import tempfile, os, pathlib, asyncio
    uid = call.from_user.id
    batch: List[FileInfo] = user_batches.pop(uid, [])
    total = len(batch)
    msg = call.message
    if msg is not None:
        await msg.edit_text("üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –≤ Google Drive...")
    results: List[UploadResult] = []
    manual_files = []
    semaphore = asyncio.Semaphore(3)
    progress_msgs = [None] * total

    async def upload_one(i: int, fi: FileInfo):
        file_path = None
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{fi.orig_name}") as tmp:
                file_path = tmp.name
                await msg.bot.download(fi.file_id, destination=tmp.name)
            try:
                validate_file(fi.orig_name, os.path.getsize(file_path))
            except FileValidationError as e:
                results.append(UploadResult(orig_name=fi.orig_name, file_id=None, drive_link=None, status="failed", error=str(e)))
                if msg is not None:
                    await msg.answer(f"‚ùå –§–∞–π–ª <b>{fi.orig_name}</b> –Ω–µ –ø—Ä–∏–Ω—è—Ç: {e}", parse_mode="HTML")
                return
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
            path_parts = fi.orig_name.rsplit('.', 1)[0].split('_')[:-1]  # –ø—Ä–∏–º–µ—Ä: –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –¥–∞—Ç—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if not path_parts:
                manual_files.append((fi, file_path))
                results.append(UploadResult(orig_name=fi.orig_name, file_id=None, drive_link=None, status="manual"))
                if msg is not None:
                    await msg.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–ø–∫—É –¥–ª—è <b>{fi.orig_name}</b>. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.", parse_mode="HTML")
                return
            async with semaphore:
                try:
                    progress_msgs[i] = await msg.answer(f"‚è≥ {i+1}/{total} ‚Äî <b>{fi.orig_name}</b>: –∑–∞–≥—Ä—É–∂–∞—é...", parse_mode="HTML")
                    folder_id = await ensure_folders(path_parts)
                    file_id = await upload_file(pathlib.Path(file_path), path_parts)
                    drive_link = f"https://drive.google.com/file/d/{file_id}/view"
                    results.append(UploadResult(orig_name=fi.orig_name, file_id=file_id, drive_link=drive_link, status="success"))
                    await progress_msgs[i].edit_text(f"‚úÖ {i+1}/{total} ‚Äî <b>{fi.orig_name}</b>: –∑–∞–≥—Ä—É–∂–µ–Ω–æ!", parse_mode="HTML")
                except Exception as e:
                    results.append(UploadResult(orig_name=fi.orig_name, file_id=None, drive_link=None, status="failed", error=str(e)))
                    await progress_msgs[i].edit_text(f"‚ùå {i+1}/{total} ‚Äî <b>{fi.orig_name}</b>: –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        finally:
            if file_path and os.path.exists(file_path):
                os.unlink(file_path)

    tasks = [upload_one(i, fi) for i, fi in enumerate(batch)]
    await asyncio.gather(*tasks)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    links_text = ""
    for i, res in enumerate(results):
        if res.status == "success":
            links_text += f"<b>{i+1}.</b> <b>{res.orig_name}</b>: <a href=\"{res.drive_link}\">–û—Ç–∫—Ä—ã—Ç—å</a>\n"
    fail_text = ""
    failed = [r for r in results if r.status == "failed"]
    if failed:
        fail_text = "\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:\n" + "\n".join([f"<b>{r.orig_name}</b>: {r.error}" for r in failed])
    folder_link = f"https://drive.google.com/drive/folders/{settings.gdrive_root_folder}"
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –≤ Google Drive", url=folder_link)]])
    final_text = f"<b>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n{links_text}{fail_text}"
    if msg is not None:
        await msg.answer(final_text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)
    # Fallback: –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã —Å –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º –ø—É—Ç—ë–º ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –≤—Ä—É—á–Ω—É—é
    if manual_files and msg is not None:
        for fi, file_path in manual_files:
            await msg.answer(f"‚ö†Ô∏è –î–ª—è —Ñ–∞–π–ª–∞ <b>{fi.orig_name}</b> –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–ø–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –≤—Ä—É—á–Ω—É—é:", parse_mode="HTML")
            folders = await list_drive_folders(settings.gdrive_root_folder)
            kb = build_folder_keyboard(folders, settings.gdrive_root_folder, ["–ö–æ—Ä–µ–Ω—å"])
            await msg.answer("üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:</b>", parse_mode="HTML", reply_markup=kb)
    await call.answer()

# --- FSM wizard –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ---
@router.callback_query(F.data == "fix")
async def cb_fix(call: CallbackQuery, state: FSMContext):
    uid = call.from_user.id
    batch = user_batches.get(uid, [])
    # –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–∞–π–ª
    idx = next((i for i, fi in enumerate(batch) if not fi.guessed), None)
    if idx is None:
        await call.answer("–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤!", show_alert=True)
        return
    await state.update_data(batch=batch, fix_idx=idx)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ call –∏ call.message –ø–µ—Ä–µ–¥ edit_text
    if call is not None and hasattr(call, 'message') and hasattr(call.message, 'edit_text'):
        await call.message.edit_text(f"‚úèÔ∏è –î–∞–≤–∞–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞: <b>{batch[idx].orig_name}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞:", parse_mode="HTML")
    await state.set_state(FilenameWizard.principal)
    await call.answer()

# --- –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def t(key: str, lang: str = 'ru') -> str:
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ª–æ–≤–∞—Ä—å, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å
    texts = {
        'ru': {
            'enter_principal': '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞ (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é):',
            'enter_agent': '–í–≤–µ–¥–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ (–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞):',
            'enter_doctype': '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:',
            'enter_number': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:',
            'enter_date': '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì–ú–ú–î–î):',
            'progress': '‚è≥ –ó–∞–ø–æ–ª–Ω—è–µ–º {step}/{total} —à–∞–≥–æ–≤...'
        },
        'en': {
            'enter_principal': 'Enter principal (organization):',
            'enter_agent': 'Enter agent (counterparty):',
            'enter_doctype': 'Enter document type:',
            'enter_number': 'Enter document number:',
            'enter_date': 'Enter date (YYYYMMDD):',
            'progress': '‚è≥ Step {step} of {total}...'
        }
    }
    return texts.get(lang, texts['ru']).get(key, key)

@router.message(FilenameWizard.principal)
async def wizard_principal(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    total = len(batch)
    step = 1
    lang = 'ru'  # TODO: –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if batch is None or idx is None or batch[idx] is None or not hasattr(batch[idx], 'orig_name') or batch[idx].orig_name is None:
        await send_error(msg, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    principal = msg.text.strip() if msg is not None and msg.text and isinstance(msg.text, str) else ""
    orig_name = batch[idx].orig_name if batch[idx] and hasattr(batch[idx], 'orig_name') and batch[idx].orig_name else ""
    ext = orig_name.split(".")[-1] if orig_name else ""
    batch[idx].guessed = FilenameInfo(
        principal=principal,
        agent="",
        doctype="",
        number="",
        date="",
        gdrive_folder=""
    )
    await state.update_data(batch=batch)
    await msg.answer(f"{t('progress', lang).format(step=step, total=5)}\n{t('enter_agent', lang)}")
    await state.set_state(FilenameWizard.agent)

@router.message(FilenameWizard.agent)
async def wizard_agent(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    total = len(batch)
    step = 2
    lang = 'ru'
    if batch is None or idx is None or batch[idx] is None:
        await send_error(msg, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    if batch[idx].guessed is None:
        await send_error(msg, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    batch[idx].guessed.agent = msg.text.strip() if msg is not None and msg.text and isinstance(msg.text, str) else ""
    await state.update_data(batch=batch)
    await msg.answer(f"{t('progress', lang).format(step=step, total=5)}\n{t('enter_doctype', lang)}")
    await state.set_state(FilenameWizard.doctype)

@router.message(FilenameWizard.doctype)
async def wizard_doctype(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    total = len(batch)
    step = 3
    lang = 'ru'
    if batch is None or idx is None or batch[idx] is None:
        await send_error(msg, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    batch[idx].guessed.doctype = msg.text.strip() if msg is not None and msg.text and isinstance(msg.text, str) else ""
    await state.update_data(batch=batch)
    await msg.answer(f"{t('progress', lang).format(step=step, total=5)}\n{t('enter_number', lang)}")
    await state.set_state(FilenameWizard.number)

@router.message(FilenameWizard.number)
async def wizard_number(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    total = len(batch)
    step = 4
    lang = 'ru'
    if batch is None or idx is None or batch[idx] is None:
        await send_error(msg, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    batch[idx].guessed.number = msg.text.strip() if msg is not None and msg.text and isinstance(msg.text, str) else ""
    await state.update_data(batch=batch)
    await msg.answer(f"{t('progress', lang).format(step=step, total=5)}\n{t('enter_date', lang)}")
    await state.set_state(FilenameWizard.date)

@router.message(FilenameWizard.date)
async def wizard_date(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    total = len(batch)
    step = 5
    lang = 'ru'
    if batch is None or idx is None or batch[idx] is None:
        await send_error(msg, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    batch[idx].guessed.date = msg.text.strip() if msg is not None and msg.text and isinstance(msg.text, str) else ""
    await state.update_data(batch=batch)
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    preview = batch[idx].guessed
    ext = batch[idx].orig_name.split('.')[-1] if batch[idx].orig_name and '.' in batch[idx].orig_name else ''
    preview_text = f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:</b>\n<pre>{preview.principal}_{preview.agent}_{preview.doctype}_{preview.number}_{preview.date}.{ext}</pre>"
    await msg.answer(f"{t('progress', lang).format(step=step, total=5)}\n{preview_text}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    next_idx = next((i for i, fi in enumerate(batch) if not fi.guessed), None)
    if next_idx is not None:
        await state.update_data(fix_idx=next_idx)
        await msg.answer(f"‚úèÔ∏è –°–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª: <b>{batch[next_idx].orig_name}</b>\n\n{t('enter_principal', lang)}", parse_mode="HTML")
        await state.set_state(FilenameWizard.principal)
    else:
        await state.clear()
        user_batches[msg.from_user.id] = batch
        text, markup = build_batch_summary(batch)
        if msg is not None and hasattr(msg, 'answer'):
            await msg.answer("–í—Å–µ –∏–º–µ–Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n" + text, reply_markup=markup, parse_mode="HTML")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main handler


@router.message(F.document)
async def handle_upload(msg: Message):
    doc = msg.document
    if not doc or not hasattr(doc, 'file_name') or doc.file_name is None:
        await send_error(msg, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∏.")
        return
    try:
        validate_file(doc.file_name, doc.file_size)
    except FileValidationError as e:
        await send_error(msg, f"–§–∞–π–ª –Ω–µ –ø—Ä–∏–Ω—è—Ç: {e}")
        return
    user_id = msg.from_user.id
    # --- Redis batch buffer ---
    import tempfile, os
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ doc –ø–µ—Ä–µ–¥ id
    if doc is None or not hasattr(doc, 'file_id') or doc.file_id is None:
        await send_error(msg, "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç file_id —É –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ doc –ø–µ—Ä–µ–¥ download
    if doc is not None and hasattr(msg.bot, 'download') and hasattr(doc, 'file_id') and doc.file_id:
        with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{doc.file_name if doc.file_name else ''}") as tmp:
            await msg.bot.download(doc.file_id, destination=tmp.name)
            guessed = await try_guess_filename(tmp.name, doc.file_name or '')
        os.unlink(tmp.name)
    else:
        await send_error(msg, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")
        return
    status = 'ok' if guessed else 'need_wizard'
    fi = FileInfo(doc.file_id, doc.file_name, guessed, status)
    await add_file(user_id, fi)
    size = await get_size(user_id)
    if size == 1:
        import asyncio
        async def batch_timer():
            await asyncio.sleep(settings.cache_ttl)
            batch = await flush_batch(user_id)
            if not batch:
                return
            await send_batch_summary(msg, batch)
        asyncio.create_task(batch_timer())
    if size > VALID_BATCH_LIMIT:
        await msg.reply(
            f"‚ö†Ô∏è –í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –±–æ–ª–µ–µ {VALID_BATCH_LIMIT} —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑.\n"
            "–î–ª—è –±–æ–ª—å—à–∏—Ö –ø–∞—Ä—Ç–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ –∏–ª–∏ CSV-—Ä–µ–∂–∏–º.\n"
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /help"
        )
        await flush_batch(user_id)
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ msg –ø–µ—Ä–µ–¥ answer
    if msg is not None and hasattr(msg, 'answer'):
        await msg.answer(f"ÔøΩÔøΩ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç! –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –µ—â—ë (–¥–æ {VALID_BATCH_LIMIT} —Ñ–∞–π–ª–æ–≤ –∑–∞ {settings.cache_ttl} —Å–µ–∫)")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–ª–ª–±–µ–∫ ¬´—Ä—É—á–Ω–∞—è –ø–∞–ø–∫–∞¬ª


@router.callback_query(F.data.startswith("manual:"))
async def manual_folder(cb: CallbackQuery) -> None:
    file_id = cb.data.split(":", 1)[1]
    await cb.message.answer("–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏ üòâ")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º
    await cb.answer()

class BulkFixForm(StatesGroup):
    waiting_for_file_index = State()
    waiting_for_new_name = State()

@router.callback_query(F.data == "bulk_fix")
async def start_bulk_fix(cb: CallbackQuery, state: FSMContext):
    uid = cb.from_user.id
    batch = await get_batch(uid)
    if not batch:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ call –∏ call.message –ø–µ—Ä–µ–¥ edit_text
        if cb is not None and hasattr(cb, 'message') and hasattr(cb.message, 'edit_text'):
            await cb.message.edit_text("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
    for i, fi in enumerate(batch, 1):
        text += f"{i}. {fi.orig_name}\n"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ cb –∏ cb.message –ø–µ—Ä–µ–¥ answer
    if cb is not None and hasattr(cb, 'message') and hasattr(cb.message, 'answer'):
        await cb.message.answer(text)
    await state.update_data(batch=batch)
    await state.set_state(BulkFixForm.waiting_for_file_index)
    await cb.answer()

@router.message(BulkFixForm.waiting_for_file_index)
async def bulk_fix_index(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    try:
        idx = int(msg.text.strip()) - 1
        assert 0 <= idx < len(batch)
    except Exception:
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(fix_idx=idx)
    await msg.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞: {batch[idx].orig_name}")
    await state.set_state(BulkFixForm.waiting_for_new_name)

@router.message(BulkFixForm.waiting_for_new_name)
async def bulk_fix_new_name(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    new_name = msg.text.strip()
    batch[idx].orig_name = new_name
    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å guessed, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await state.update_data(batch=batch)
    await msg.answer(f"–ò–º—è —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä, –∏–Ω–∞—á–µ /menu.")
    await state.set_state(BulkFixForm.waiting_for_file_index)

async def try_guess_filename(file_path: str, orig_name: str) -> FilenameInfo | None:
    # 1. –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏
    info = parse_filename(orig_name or "")
    if info:
        return info
    # 2. OCR/docx/pdf –∞–Ω–∞–ª–∏–∑
    import asyncio
    try:
        loop = asyncio.get_running_loop()
        text = await run_ocr(file_path)
    except Exception:
        text = ""
    params = extract_parameters(text)
    # –ü—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –ø–æ–ª—è
    principal = params.get("org", [None])[0]
    doctype = next((dt for dt in ["–¥–æ–≥–æ–≤–æ—Ä", "–∞–∫—Ç", "–ø–æ—Ä—É—á–µ–Ω–∏–µ"] if dt in (text or "").lower()), None)
    number = params.get("number", [None])[0]
    date = params.get("date", [None])[0]
    ext = ""
    if orig_name:
        ext = orig_name.split(".")[-1].lower()
    if principal and doctype and number and date and ext:
        return FilenameInfo(principal=principal, agent=None, doctype=doctype, number=number, date=date, ext=ext)
    return None

async def send_batch_summary(msg: Message, batch: list[FileInfo]):
    # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º flush_and_ask
    await flush_and_ask(msg.from_user.id, msg.bot)

# --- –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π handler –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message()
async def block_unexpected_messages(msg: Message, state: FSMContext):
    user_state = await state.get_state()
    if not user_state:
        try:
            await msg.delete()
        except Exception:
            pass
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å—Ä–∞–±–æ—Ç–∞—é—Ç —Ä–∞–Ω—å—à–µ

class BulkUploadStates(StatesGroup):
    waiting_template = State()
    waiting_files = State()
    processing = State()

@router.message(F.text.startswith("/–º–∞—Å—Å–æ–≤–∞—è"))
async def start_bulk_upload(message: Message, state: FSMContext):
    parts = message.text.split()[1:]
    if len(parts) >= 3:
        company1 = parts[0]
        company2 = parts[1]
        doctype = parts[2]
        date = parts[3] if len(parts) > 3 else None
        template = {
            'company1': company1,
            'company2': company2,
            'doctype': doctype,
            'date': date
        }
        await state.update_data(template=template, file_count=0)
        await message.answer(
            f"üì¶ **–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞**\n\n"
            f"üë• **–ö–æ–º–ø–∞–Ω–∏–∏:** {company1} ‚Üî {company2}\n"
            f"üìã **–¢–∏–ø:** {doctype}\n"
            f"üìÖ **–î–∞—Ç–∞:** {date or '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}\n\n"
            f"üìÅ **–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–∞–π–ª—ã:**\n"
            f"‚Ä¢ –ü–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –∞—Ä—Ö–∏–≤–æ–º ZIP\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä–∞ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: 1, 2, 3...\n"
            f"‚Ä¢ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: `/—Å—Ç–æ–ø`",
            parse_mode="Markdown"
        )
        await state.set_state(BulkUploadStates.waiting_files)
    else:
        await message.answer(
            "üì¶ **–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞**\n\n"
            "**–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:**\n"
            "`/–º–∞—Å—Å–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è1 –ö–æ–º–ø–∞–Ω–∏—è2 –¢–∏–ø–î–æ–∫—É–º–µ–Ω—Ç–∞ [–î–∞—Ç–∞]`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/–º–∞—Å—Å–æ–≤–∞—è –î–µ–º–∏—Ä–µ–∫—Å –í–∞–ª–∏–µ–Ω—Ç –î–æ–≥–æ–≤–æ—Ä`\n"
            "‚Ä¢ `/–º–∞—Å—Å–æ–≤–∞—è –†–µ–∫—Å–µ–Ω –ê–ª—å—Ñ–∞ –ê–∫—Ç 20250721`\n\n"
            "*–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–∞–π–ª—ã!*",
            parse_mode="Markdown"
        )

@router.message(BulkUploadStates.waiting_files, F.document)
async def process_bulk_file(message: Message, state: FSMContext):
    document = message.document
    try:
        validate_file(document.file_name, document.file_size)
    except FileValidationError as e:
        await message.answer(f"‚ùå –§–∞–π–ª –Ω–µ –ø—Ä–∏–Ω—è—Ç: {e}")
        return
    data = await state.get_data()
    template = data['template']
    file_count = data.get('file_count', 0)
    autocomplete = AutocompleteService(settings.REDIS_DSN)
    await autocomplete.connect()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ ZIP –∞—Ä—Ö–∏–≤ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
    if document.mime_type == 'application/zip':
        await message.answer("üì¶ ZIP-–∞—Ä—Ö–∏–≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.")
        return
    file_count += 1
    next_number = await autocomplete.get_next_document_number(
        template['company1'],
        template['company2'],
        template['doctype']
    )
    date = template.get('date') or datetime.now().strftime("%Y%m%d")
    extension = os.path.splitext(document.file_name)[1]
    new_filename = f"{template['company1']}_{template['company2']}_{template['doctype']}_{next_number}_{date}{extension}"
    gdrive_path = f"{template['company1']}/{template['doctype']}/{date[:4]}"
    file_info = {
        'file_id': document.file_id,
        'original_name': document.file_name,
        'new_name': new_filename,
        'gdrive_path': gdrive_path,
        'size': document.file_size
    }
    files_list = data.get('files_list', [])
    files_list.append(file_info)
    await state.update_data(
        file_count=file_count,
        files_list=files_list
    )
    await message.answer(
        f"‚úÖ **–§–∞–π–ª #{file_count} –¥–æ–±–∞–≤–ª–µ–Ω**\n\n"
        f"üìÑ `{document.file_name}`\n"
        f"‚û°Ô∏è `{new_filename}`\n"
        f"üìÅ `{gdrive_path}`\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ `/–∑–∞–≥—Ä—É–∑–∏—Ç—å` –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        parse_mode="Markdown"
    )
