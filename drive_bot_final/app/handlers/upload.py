from __future__ import annotations

import asyncio
from aiogram import Router, F
from aiogram.types import (
    Message,
    FSInputFile,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pathlib import Path
from typing import Dict, List
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import tempfile
from collections import defaultdict
from dataclasses import dataclass
import time

CACHE_TTL = 45  # —Å–µ–∫—É–Ω–¥
VALID_BATCH_LIMIT = 15
user_batches = defaultdict(list)  # user_id -> [FileInfo]
user_batch_tasks = {}  # user_id -> asyncio.Task

@dataclass
class FileInfo:
    file_id: str
    orig_name: str
    guessed: FilenameInfo | None
    status: str  # 'ok' | 'need_wizard'

from app.utils.filename_parser import parse_filename, FilenameInfo
from app.services import gdrive_handler
from app.config import settings
from app.services.drive import upload_file
from app.services.ocr import run_ocr
from app.services.analyzer import extract_parameters
from app.utils.buffers import add_file, get_batch, flush_batch, get_size, set_ttl

router = Router(name="upload")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers


async def send_error(msg: Message, text: str) -> None:
    await msg.reply(f"‚ùå {text}\n–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üôÇ")


def _build_duplicate_kb(link: str, manual_cb: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π", url=link))
    kb.row(InlineKeyboardButton(text="üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –≤—Ä—É—á–Ω—É—é", callback_data=manual_cb))
    return kb.as_markup()


def escape_markdown(text: str) -> str:
    for ch in r'_[]()~`>#+-=|{}.!':
        text = text.replace(ch, f'\\{ch}')
    return text


def build_batch_summary(batch: list[FileInfo]) -> tuple[str, InlineKeyboardMarkup]:
    lines = [f"<b>üìã –ù–∞–π–¥–µ–Ω–æ {len(batch)} —Ñ–∞–π–ª–æ–≤:</b>", "<pre>‚Ññ  –ë—ã–ª–æ ‚ûú –°—Ç–∞–Ω–µ—Ç</pre>"]
    problem_idx = []
    for idx, fi in enumerate(batch, start=1):
        if fi.guessed:
            new_name = f"{fi.guessed.principal}_{fi.guessed.agent or ''}_{fi.guessed.doctype}_{fi.guessed.number}_{fi.guessed.date}.{fi.guessed.ext}"
            lines.append(f"<pre>{idx:2} {fi.orig_name} ‚ûú {new_name}</pre>")
        else:
            lines.append(f"<pre>{idx:2} {fi.orig_name} ‚ûú ‚ö†Ô∏è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ</pre>")
            problem_idx.append(idx)
    kb = InlineKeyboardBuilder()
    kb.button(text=f"‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å {len(batch) - len(problem_idx)} —Ñ–∞–π–ª–æ–≤", callback_data="bulk_upload")
    if problem_idx:
        kb.button(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="fix")
    kb.button(text="‚èπ –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    kb.adjust(1)
    return "\n".join(lines), kb.as_markup()

async def flush_and_ask(user_id: int, bot):
    batch = user_batches.pop(user_id, [])
    if not batch:
        return
    text, markup = build_batch_summary(batch)
    await bot.send_message(user_id, text, reply_markup=markup, parse_mode="HTML")

# --- CALLBACK HANDLERS ---
@router.callback_query(F.data == "cancel")
async def cb_cancel(call: CallbackQuery):
    user_batches.pop(call.from_user.id, None)
    await call.message.edit_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await call.answer()

@router.callback_query(F.data == "bulk_upload")
async def cb_upload(call: CallbackQuery):
    uid = call.from_user.id
    batch = user_batches.pop(uid, [])
    total = len(batch)
    msg = call.message
    await msg.edit_text("üöÄ –ó–∞–≥—Ä—É–∂–∞—é, —Å–µ–∫—É–Ω–¥—É‚Ä¶")
    # TODO: upload to Drive
    for i, fi in enumerate(batch, 1):
        await asyncio.sleep(0.1)  # mock I/O
        await msg.edit_text(f"üöÄ –ó–∞–≥—Ä—É–∂–∞—é: {i}/{total} —Ñ–∞–π–ª–æ–≤‚Ä¶")
    await msg.edit_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total} —Ñ–∞–π–ª–æ–≤.")
    await call.answer()

# --- FSM wizard –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ---
@router.callback_query(F.data == "fix")
async def cb_fix(call: CallbackQuery, state: FSMContext):
    uid = call.from_user.id
    batch = user_batches.get(uid, [])
    # –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–∞–π–ª
    idx = next((i for i, fi in enumerate(batch) if not fi.guessed), None)
    if idx is None:
        await call.answer("–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤!", show_alert=True)
        return
    await state.update_data(batch=batch, fix_idx=idx)
    await call.message.edit_text(f"‚úèÔ∏è –î–∞–≤–∞–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞: <b>{batch[idx].orig_name}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞:", parse_mode="HTML")
    await state.set_state(FilenameWizard.principal)
    await call.answer()

@router.message(FilenameWizard.principal)
async def wizard_principal(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    batch[idx].guessed = FilenameInfo(
        principal=msg.text.strip(),
        agent=None, doctype=None, number=None, date=None, ext=batch[idx].orig_name.split(".")[-1]
    )
    await state.update_data(batch=batch)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:")
    await state.set_state(FilenameWizard.agent)

@router.message(FilenameWizard.agent)
async def wizard_agent(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    batch[idx].guessed.agent = msg.text.strip()
    await state.update_data(batch=batch)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    await state.set_state(FilenameWizard.doctype)

@router.message(FilenameWizard.doctype)
async def wizard_doctype(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    batch[idx].guessed.doctype = msg.text.strip()
    await state.update_data(batch=batch)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:")
    await state.set_state(FilenameWizard.number)

@router.message(FilenameWizard.number)
async def wizard_number(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    batch[idx].guessed.number = msg.text.strip()
    await state.update_data(batch=batch)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì–ú–ú–î–î):")
    await state.set_state(FilenameWizard.date)

@router.message(FilenameWizard.date)
async def wizard_date(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    batch[idx].guessed.date = msg.text.strip()
    await state.update_data(batch=batch)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    next_idx = next((i for i, fi in enumerate(batch) if not fi.guessed), None)
    if next_idx is not None:
        await state.update_data(fix_idx=next_idx)
        await msg.answer(f"‚úèÔ∏è –°–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª: <b>{batch[next_idx].orig_name}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞:", parse_mode="HTML")
        await state.set_state(FilenameWizard.principal)
    else:
        # –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É
        await state.clear()
        user_batches[msg.from_user.id] = batch
        text, markup = build_batch_summary(batch)
        await msg.answer("–í—Å–µ –∏–º–µ–Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n" + text, reply_markup=markup, parse_mode="HTML")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main handler


@router.message(F.document)
async def handle_upload(msg: Message):
    doc = msg.document
    if not doc or not doc.file_name:
        await send_error(msg, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∏.")
        return
    user_id = msg.from_user.id
    # --- Redis batch buffer ---
    import tempfile, os
    with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{doc.file_name}") as tmp:
        await msg.bot.download(doc.file_id, destination=tmp.name)
        guessed = await try_guess_filename(tmp.name, doc.file_name)
    os.unlink(tmp.name)
    status = 'ok' if guessed else 'need_wizard'
    fi = FileInfo(doc.file_id, doc.file_name, guessed, status)
    await add_file(user_id, fi)
    size = await get_size(user_id)
    if size == 1:
        import asyncio
        async def batch_timer():
            await asyncio.sleep(CACHE_TTL)
            batch = await flush_batch(user_id)
            if not batch:
                return
            await send_batch_summary(msg, batch)
        asyncio.create_task(batch_timer())
    if size > VALID_BATCH_LIMIT:
        await msg.reply(
            f"‚ö†Ô∏è –í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –±–æ–ª–µ–µ {VALID_BATCH_LIMIT} —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑.\n"
            "–î–ª—è –±–æ–ª—å—à–∏—Ö –ø–∞—Ä—Ç–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ –∏–ª–∏ CSV-—Ä–µ–∂–∏–º.\n"
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /help"
        )
        await flush_batch(user_id)
        return
    await msg.reply(f"üëå –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç! –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –µ—â—ë (–¥–æ {VALID_BATCH_LIMIT} —Ñ–∞–π–ª–æ–≤ –∑–∞ {CACHE_TTL} —Å–µ–∫)")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–ª–ª–±–µ–∫ ¬´—Ä—É—á–Ω–∞—è –ø–∞–ø–∫–∞¬ª


@router.callback_query(F.data.startswith("manual:"))
async def manual_folder(cb: CallbackQuery) -> None:
    file_id = cb.data.split(":", 1)[1]
    await cb.message.answer("–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏ üòâ")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º
    await cb.answer()


class FilenameWizard(StatesGroup):
    principal = State()
    agent = State()
    doctype = State()
    number = State()
    date = State()
    confirm = State()

class BulkFixForm(StatesGroup):
    waiting_for_file_index = State()
    waiting_for_new_name = State()

@router.callback_query(F.data == "bulk_fix")
async def start_bulk_fix(cb: CallbackQuery, state: FSMContext):
    uid = cb.from_user.id
    batch = await get_batch(uid)
    if not batch:
        await cb.message.answer("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
    for i, fi in enumerate(batch, 1):
        text += f"{i}. {fi.orig_name}\n"
    await state.update_data(batch=batch)
    await cb.message.answer(text)
    await state.set_state(BulkFixForm.waiting_for_file_index)
    await cb.answer()

@router.message(BulkFixForm.waiting_for_file_index)
async def bulk_fix_index(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    try:
        idx = int(msg.text.strip()) - 1
        assert 0 <= idx < len(batch)
    except Exception:
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(fix_idx=idx)
    await msg.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞: {batch[idx].orig_name}")
    await state.set_state(BulkFixForm.waiting_for_new_name)

@router.message(BulkFixForm.waiting_for_new_name)
async def bulk_fix_new_name(msg: Message, state: FSMContext):
    data = await state.get_data()
    batch = data["batch"]
    idx = data["fix_idx"]
    new_name = msg.text.strip()
    batch[idx].orig_name = new_name
    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å guessed, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await state.update_data(batch=batch)
    await msg.answer(f"–ò–º—è —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä, –∏–Ω–∞—á–µ /menu.")
    await state.set_state(BulkFixForm.waiting_for_file_index)

async def try_guess_filename(file_path: str, orig_name: str) -> FilenameInfo | None:
    # 1. –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–µ–Ω–∏
    info = parse_filename(orig_name or "")
    if info:
        return info
    # 2. OCR/docx/pdf –∞–Ω–∞–ª–∏–∑
    import asyncio
    try:
        loop = asyncio.get_running_loop()
        text = await loop.run_in_executor(None, run_ocr, file_path)
    except Exception:
        text = ""
    params = extract_parameters(text)
    # –ü—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –ø–æ–ª—è
    principal = params.get("org", [None])[0]
    doctype = next((dt for dt in ["–¥–æ–≥–æ–≤–æ—Ä", "–∞–∫—Ç", "–ø–æ—Ä—É—á–µ–Ω–∏–µ"] if dt in (text or "").lower()), None)
    number = params.get("number", [None])[0]
    date = params.get("date", [None])[0]
    ext = ""
    if orig_name:
        ext = orig_name.split(".")[-1].lower()
    if principal and doctype and number and date and ext:
        return FilenameInfo(principal=principal, agent=None, doctype=doctype, number=number, date=date, ext=ext)
    return None

async def send_batch_summary(msg: Message, batch: list[FileInfo]):
    # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º flush_and_ask
    await flush_and_ask(msg.from_user.id, msg.bot)
