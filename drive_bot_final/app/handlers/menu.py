from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Document, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.utils.telegram_utils import escape_markdown
import structlog
log = structlog.get_logger(__name__)

from app.utils.file_validation import validate_file, FileValidationError

# from ..services.pdf_ocr import PDFOCRService
# from ..services.ai_validator import AITextValidator
# (–ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)

router = Router()

class ReadPDFStates(StatesGroup):
    waiting_for_pdf = State()
    processing = State()

def get_main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="upload")],
        [InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", callback_data="bulk_upload")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤", callback_data="search_files")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="browse_files")],
        [InlineKeyboardButton(text="üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å PDF", callback_data="read_pdf")],
        [InlineKeyboardButton(text="üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="currency_rates")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])
    return keyboard

# --- ReplyKeyboard (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏) ---
def get_reply_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å"), KeyboardButton("üîç –ù–∞–π—Ç–∏")],
            [KeyboardButton("üì¶ –ú–∞—Å—Å–æ–≤–æ"), KeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å PDF")],
            [KeyboardButton("üí± –ö—É—Ä—Å—ã"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ –∫–æ–º–∞–Ω–¥ ---
@router.message()
async def universal_handler(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
    if message.document:
        doc = message.document
        try:
            validate_file(doc.file_name, doc.file_size)
        except FileValidationError as e:
            await message.answer(f"‚ùå –§–∞–π–ª –Ω–µ –ø—Ä–∏–Ω—è—Ç: {e}")
            return
        filename = (doc.file_name or '').lower()
        # PDF
        if filename.endswith('.pdf'):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton("üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="ocr_pdf")],
                [InlineKeyboardButton("üìÅ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Drive", callback_data="save_drive")],
                [InlineKeyboardButton("üè¶ –ù–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂–∏", callback_data="bank_analyze")]
            ])
            await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å PDF?", reply_markup=keyboard)
            return
        # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        if '–≤—ã–ø–∏—Å–∫–∞' in filename or 'statement' in filename:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton("üè¶ –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="bank_ocr")],
                [InlineKeyboardButton("üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="bank_report")]
            ])
            await message.answer("–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)
            return
        # ZIP –∞—Ä—Ö–∏–≤
        if filename.endswith('.zip'):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton("üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", callback_data="bulk_upload")],
                [InlineKeyboardButton("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ", callback_data="show_zip")],
                [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", callback_data="quick_zip")]
            ])
            await message.answer("ZIP-–∞—Ä—Ö–∏–≤: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)
            return
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        await message.answer(
            "–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º?",
            reply_markup=get_main_menu_keyboard()
        )
        return
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç
    if message.text:
        text = message.text.lower().strip()
        # –ë—ã—Å—Ç—Ä—ã–µ —Ñ—Ä–∞–∑—ã
        if any(word in text for word in ["–∫—É—Ä—Å", "–¥–æ–ª–ª–∞—Ä", "–µ–≤—Ä–æ", "—é–∞–Ω—å"]):
            await message.answer(
                "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:",
                reply_markup=get_main_menu_keyboard()
            )
            return
        if "–Ω–∞–π—Ç–∏" in text or "–ø–æ–∏—Å–∫" in text:
            await message.answer(
                "üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤:",
                reply_markup=get_main_menu_keyboard()
            )
            return
        if any(word in text for word in ["–¥–æ–≥–æ–≤–æ—Ä", "–∞–∫—Ç", "—Å—á–µ—Ç"]):
            await message.answer(
                "üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç?",
                reply_markup=get_main_menu_keyboard()
            )
            return
        if text in ["üì§", "–∑–∞–≥—Ä—É–∑–∏—Ç—å"]:
            await message.answer(
                "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:",
                reply_markup=get_main_menu_keyboard()
            )
            return
        if text in ["üì¶", "–º–∞—Å—Å–æ–≤–æ"]:
            await message.answer(
                "üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:",
                reply_markup=get_main_menu_keyboard()
            )
            return
        if text in ["üìñ", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å"]:
            await message.answer(
                "üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å PDF:",
                reply_markup=get_main_menu_keyboard()
            )
            return
        if text in ["‚öôÔ∏è", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]:
            await message.answer(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_main_menu_keyboard()
            )
            return
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )

@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏!**\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? –í—ã–±–∏—Ä–∞–π –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ üòä",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "read_pdf")
async def start_read_pdf_process(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìñ **–î–∞–≤–∞–π –ø—Ä–æ—á–∏—Ç–∞–µ–º —Ç–≤–æ–π PDF –≤–º–µ—Å—Ç–µ!**\n\n"
        "üåü **–ß—Ç–æ —è —É–º–µ—é –¥–µ–ª–∞—Ç—å:**\n"
        "‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—é –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞\n"
        "‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª—è—é –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n" 
        "‚Ä¢ –î–µ–ª–∞—é —Ç–µ–∫—Å—Ç –∫—Ä–∞—Å–∏–≤—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–ª\n\n"
        "üìÅ **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π PDF —Ñ–∞–π–ª!**\n\n"
        "üí° *–§–∞–π–ª—ã –¥–æ 20 –ú–ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–µ–∑ –ø—Ä–æ–±–ª–µ–º*",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]),
        parse_mode="Markdown"
    )
    await state.set_state(ReadPDFStates.waiting_for_pdf)

@router.message(ReadPDFStates.waiting_for_pdf, F.document)
async def process_pdf_document(message: Message, state: FSMContext):
    document: Document = message.document
    try:
        validate_file(document.file_name, document.file_size)
    except FileValidationError as e:
        await message.answer(f"‚ùå –§–∞–π–ª –Ω–µ –ø—Ä–∏–Ω—è—Ç: {e}")
        return
    if not document.mime_type == 'application/pdf':
        await message.answer(
            "–û–π! üòÖ –Ø —É–º–µ—é —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç, –∏ —è –µ–≥–æ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–æ—á–∏—Ç–∞—é! üìñ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìñ –í—ã–±—Ä–∞—Ç—å PDF", callback_data="read_pdf")]
            ])
        )
        return
    if document.file_size > 20 * 1024 * 1024:
        file_size_mb = document.file_size / (1024 * 1024)
        await message.answer(
            f"–£–ø—Å! üòî –¢–≤–æ–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë).\n\n"
            f"–Ø –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –¥–æ 20 –ú–ë. –ü–æ–ø—Ä–æ–±—É–π —Ñ–∞–π–ª –ø–æ–º–µ–Ω—å—à–µ! üíù",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="read_pdf")]
            ])
        )
        return
    await state.set_state(ReadPDFStates.processing)
    progress_msg = await message.answer(
        "üéâ **–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞—é —á–∏—Ç–∞—Ç—å —Ç–≤–æ–π PDF...**\n\n"
        "üîÑ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...\n"
        "‚è≥ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç...\n" 
        "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ...\n"
        "‚è≥ –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n\n"
        "üí´ *–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –æ–Ω–æ —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç!*",
        parse_mode="Markdown"
    )
    try:
        await progress_msg.edit_text(
            "üéâ **–ß–∏—Ç–∞—é —Ç–≤–æ–π PDF...**\n\n"
            "‚úÖ –°–∫–∞—á–∞–ª —Ñ–∞–π–ª!\n"
            "üîÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç...\n" 
            "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ...\n"
            "‚è≥ –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n\n"
            "üìñ *–£–∂–µ –≤–∏–∂—É —Ç–≤–æ–π —Ç–µ–∫—Å—Ç!*",
            parse_mode="Markdown"
        )
        file = await message.bot.get_file(document.file_id)
        file_path = f"/tmp/{document.file_name}"
        await message.bot.download_file(file.file_path, file_path)
        await progress_msg.edit_text(
            "üéâ **–ß–∏—Ç–∞—é —Ç–≤–æ–π PDF...**\n\n"
            "‚úÖ –°–∫–∞—á–∞–ª —Ñ–∞–π–ª!\n"
            "‚úÖ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç!\n" 
            "üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ...\n"
            "‚è≥ –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n\n"
            "ü§ñ *–ò—Å–ø—Ä–∞–≤–ª—è—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏...*",
            parse_mode="Markdown"
        )
        # ocr_service = PDFOCRService()
        # raw_text, confidence, page_count = await ocr_service.extract_text_from_pdf(file_path)
        raw_text, confidence, page_count = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç PDF", 0.98, 3  # –ó–∞–≥–ª—É—à–∫–∞
        await progress_msg.edit_text(
            "üéâ **–ß–∏—Ç–∞—é —Ç–≤–æ–π PDF...**\n\n"
            "‚úÖ –°–∫–∞—á–∞–ª —Ñ–∞–π–ª!\n"
            "‚úÖ –ò–∑–≤–ª–µ–∫ —Ç–µ–∫—Å—Ç!\n" 
            "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏–ª –∫–∞—á–µ—Å—Ç–≤–æ!\n"
            "üîÑ –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n\n"
            "‚ú® *–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!*",
            parse_mode="Markdown"
        )
        # ai_validator = AITextValidator()
        # validated_text, corrections, quality_score = await ai_validator.validate_and_correct(raw_text)
        validated_text, corrections, quality_score = raw_text, [], 0.99  # –ó–∞–≥–ª—É—à–∫–∞
        import os
        os.remove(file_path)
        await show_reading_results(
            message, 
            document.file_name,
            raw_text,
            validated_text,
            confidence,
            quality_score,
            corrections,
            page_count
        )
        await progress_msg.delete()
        await state.clear()
    except Exception as e:
        await progress_msg.delete()
        await message.answer(
            f"üòî **–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: `{str(e)}`\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? ü§ó",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="read_pdf")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]),
            parse_mode="Markdown"
        )
        await state.clear()

async def show_reading_results(
    message: Message,
    filename: str,
    raw_text: str,
    validated_text: str,
    ocr_confidence: float,
    ai_quality: float,
    corrections: list,
    page_count: int
):
    stats_text = (
        f"üéâ **–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ—á–∏—Ç–∞–ª —Ç–≤–æ–π —Ñ–∞–π–ª: {filename}**\n\n"
        f"üìä **–ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:**\n"
        f"üìÑ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: **{page_count}**\n"
        f"üìù –ù–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: **{len(raw_text):,}**\n"
        f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ —á—Ç–µ–Ω–∏—è: **{ocr_confidence:.0%}**\n"
        f"‚ú® –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–∫–∏: **{ai_quality:.0%}**\n"
    )
    if corrections:
        stats_text += f"üîß –ò—Å–ø—Ä–∞–≤–∏–ª –æ—à–∏–±–æ–∫: **{len(corrections)}**\n\n"
        stats_text += "**üîç –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–ª:**\n"
        for i, correction in enumerate(corrections[:5], 1):
            stats_text += f"‚Ä¢ `{correction['original']}` ‚Üí `{correction['corrected']}`\n"
        if len(corrections) > 5:
            stats_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(corrections) - 5} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π! üòä\n"
    else:
        stats_text += "üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å - —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–Ω—ã–π!\n"
    stats_text += "\nüíù *–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:*"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –±—ã–ª–æ", callback_data="show_original_text")],
        [InlineKeyboardButton(text="‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π", callback_data="show_clean_text")],
        [InlineKeyboardButton(text="üíæ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª–æ–º", callback_data="download_text_file")],
        [InlineKeyboardButton(text="üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω", callback_data="read_pdf")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    await message.answer(stats_text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üè† **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!**\n\n"
        "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? üòä",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )

@router.message(ReadPDFStates.waiting_for_pdf)
async def handle_non_document(message: Message):
    if message.text and message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '–Ω–∞–∑–∞–¥', '/cancel']:
        await message.answer(
            "–•–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω—è—é! üòä\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    await message.answer(
        "üìñ **–Ø –∂–¥—É PDF —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è!**\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ üíù\n\n"
        "*–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥*",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]),
        parse_mode="Markdown"
    ) 

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from app.services.autocomplete_service import AutocompleteService
from app.config import settings
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from app.services.bank_ocr_service import BankDocumentOCR
from decimal import Decimal
from app.services.cbr_notifier import CBRNotificationService
from app.config import settings
from aiogram import Bot
import structlog
log = structlog.get_logger(__name__)

router = Router()

class QuickDocStates(StatesGroup):
    waiting_company1 = State()
    waiting_company2 = State()
    waiting_doctype = State()
    waiting_custom_doctype = State()
    waiting_date = State()
    waiting_number = State()

@router.message(F.text.startswith("/–±—ã—Å—Ç—Ä–æ"))
async def quick_document_start(message: Message, state: FSMContext):
    autocomplete = AutocompleteService(settings.REDIS_DSN)
    await autocomplete.connect()
    recent = await autocomplete.get_recent_counterparties(message.from_user.id)
    if recent:
        keyboard_buttons = []
        for i, counterparty in enumerate(recent[:5], 1):
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{i}. {counterparty['display']}",
                    callback_data=f"quick_counterparty_{i-1}"
                )
            ])
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ", callback_data="quick_new_counterparty")
        ])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await message.answer(
            "üöÄ **–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
            "–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–æ–≤—ã–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚úçÔ∏è **–í–≤–µ–¥–∏ –ø–µ—Ä–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é:**\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–î–µ–º–∏—Ä–µ–∫—Å*",
            parse_mode="Markdown"
        )
        await state.set_state(QuickDocStates.waiting_company1)

@router.callback_query(F.data.startswith("quick_counterparty_"))
async def select_recent_counterparty(callback: CallbackQuery, state: FSMContext):
    autocomplete = AutocompleteService(settings.REDIS_DSN)
    await autocomplete.connect()
    index = int(callback.data.split("_")[-1])
    recent = await autocomplete.get_recent_counterparties(callback.from_user.id)
    if index < len(recent):
        counterparty = recent[index]
        await state.update_data(
            company1=counterparty['company1'],
            company2=counterparty['company2']
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –î–æ–≥–æ–≤–æ—Ä", callback_data="doctype_–¥–æ–≥–æ–≤–æ—Ä")],
            [InlineKeyboardButton(text="üìÑ –°—á–µ—Ç", callback_data="doctype_—Å—á–µ—Ç")],
            [InlineKeyboardButton(text="üìù –ê–∫—Ç", callback_data="doctype_–∞–∫—Ç")],
            [InlineKeyboardButton(text="‚úçÔ∏è –î—Ä—É–≥–æ–π", callback_data="doctype_custom")]
        ])
        await callback.message.edit_text(
            f"üë• **–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã:** {counterparty['display']}\n\n"
            f"üìã **–í—ã–±–µ—Ä–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:**",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await state.set_state(QuickDocStates.waiting_doctype)

@router.callback_query(F.data.startswith("doctype_"))
async def select_doctype(callback: CallbackQuery, state: FSMContext):
    autocomplete = AutocompleteService(settings.REDIS_DSN)
    await autocomplete.connect()
    doctype = callback.data.replace("doctype_", "")
    data = await state.get_data()
    if doctype == "custom":
        await callback.message.edit_text(
            "‚úçÔ∏è **–í–≤–µ–¥–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:**\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–ü–æ—Ä—É—á–µ–Ω–∏–µ*, *–°–ø—Ä–∞–≤–∫–∞*, *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*",
            parse_mode="Markdown"
        )
        await state.set_state(QuickDocStates.waiting_custom_doctype)
        return
    next_number = await autocomplete.get_next_document_number(
        data['company1'], data['company2'], doctype
    )
    await state.update_data(doctype=doctype, number=next_number)
    today = datetime.now().strftime("%d.%m.%Y")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today})", callback_data="date_today")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="date_tomorrow")],
        [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="date_custom")]
    ])
    await callback.message.edit_text(
        f"üë• **–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã:** {data['company1']} ‚Üî {data['company2']}\n"
        f"üìã **–¢–∏–ø:** {doctype}\n"
        f"üî¢ **–ù–æ–º–µ—Ä:** {next_number} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n"
        f"üìÖ **–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await state.set_state(QuickDocStates.waiting_date) 

@router.message(F.document)
async def analyze_bank_document(message: Message):
    document = message.document
    if not (document.mime_type == 'application/pdf' or \
            '–≤—ã–ø–∏—Å–∫–∞' in (document.file_name or '').lower() or \
            'statement' in (document.file_name or '').lower()):
        return  # –ù–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
    processing_msg = await message.answer(
        "üè¶ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç...**\n\n"
        "üîç –ò—â—É –ø–ª–∞—Ç–µ–∂–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã..."
    )
    try:
        file = await message.bot.get_file(document.file_id)
        file_path = f"/tmp/{document.file_name}"
        await message.bot.download_file(file.file_path, file_path)
        bank_ocr = BankDocumentOCR()
        payments = await bank_ocr.process_bank_document(file_path)
        import os
        os.remove(file_path)
        if not payments:
            await processing_msg.edit_text(
                "ü§∑‚Äç‚ôÇÔ∏è **–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≤—ã–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–ª–æ—Ö–æ —á–∏—Ç–∞–µ—Ç—Å—è."
            )
            return
        report = f"üè¶ **–ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}**\n\n"
        total_rub = Decimal('0')
        total_usd = Decimal('0')
        total_eur = Decimal('0')
        for i, payment in enumerate(payments[:10], 1):
            report += f"**{i}.** {payment.amount} {payment.currency}\n"
            report += f"   üë§ {payment.counterparty}\n"
            report += f"   üìÖ {payment.date.strftime('%d.%m.%Y')}\n"
            if payment.account_from:
                report += f"   üí≥ {payment.account_from}\n"
            report += "\n"
            if payment.currency == 'RUB':
                total_rub += payment.amount
            elif payment.currency == 'USD':
                total_usd += payment.amount
            elif payment.currency == 'EUR':
                total_eur += payment.amount
        if len(payments) > 10:
            report += f"... –∏ –µ—â–µ {len(payments) - 10} –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
        report += "üí∞ **–ò—Ç–æ–≥–æ:**\n"
        if total_rub > 0:
            report += f"   RUB: {total_rub:,.2f}\n"
        if total_usd > 0:
            report += f"   USD: {total_usd:,.2f}\n"
        if total_eur > 0:
            report += f"   EUR: {total_eur:,.2f}\n"
        await processing_msg.edit_text(report, parse_mode="Markdown")
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="detailed_bank_report")],
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel", callback_data="save_bank_excel")],
            [InlineKeyboardButton(text="üìã –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å –∑–∞—è–≤–∫–∞–º–∏", callback_data="match_applications")]
        ])
        await message.answer(
            "üéØ **–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?**",
            reply_markup=keyboard
        )
    except Exception as e:
        await processing_msg.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:**\n\n"
            f"`{str(e)}`\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        ) 

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä notifier (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ) ---
cbr_notifier: CBRNotificationService | None = None

@router.callback_query(F.data == "currency_rates")
async def show_currency_rates(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã (–º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º)
    import aiohttp
    from datetime import datetime
    CBR_URL = "https://www.cbr.ru/scripts/XML_daily.asp"
    async with aiohttp.ClientSession() as session:
        async with session.get(CBR_URL) as resp:
            xml = await resp.text()
    import xml.etree.ElementTree as ET
    root = ET.fromstring(xml)
    def get_rate(code):
        for valute in root.findall('.//Valute'):
            if valute.find('CharCode').text == code:
                return valute.find('Value').text
        return '?'
    usd = get_rate('USD')
    eur = get_rate('EUR')
    cny = get_rate('CNY')
    today = datetime.now().strftime('%d.%m.%Y')
    await callback.message.edit_text(
        f"üí± <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§ –Ω–∞ {today}</b>\n\n"
        f"‚Ä¢ <b>USD</b>: {usd}\n"
        f"‚Ä¢ <b>EUR</b>: {eur}\n"
        f"‚Ä¢ <b>CNY</b>: {cny}\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–∞—Ö?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="cbr_subscribe")],
            [InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="cbr_unsubscribe")]
        ]),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "cbr_subscribe")
async def subscribe_to_cbr(callback: CallbackQuery):
    global cbr_notifier
    if cbr_notifier is None:
        cbr_notifier = CBRNotificationService(callback.bot, settings.REDIS_DSN)
        await cbr_notifier.connect()
    await cbr_notifier.subscribe_user(callback.from_user.id)
    await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
    await callback.message.edit_text(
        "üîî <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–∞—Ö.\n\n"
        "‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 13:00 –¥–æ 16:00 –ø–æ –ú–°–ö",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "cbr_unsubscribe")
async def unsubscribe_from_cbr(callback: CallbackQuery):
    global cbr_notifier
    if cbr_notifier is None:
        cbr_notifier = CBRNotificationService(callback.bot, settings.REDIS_DSN)
        await cbr_notifier.connect()
    await cbr_notifier.unsubscribe_user(callback.from_user.id)
    await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    await callback.message.edit_text(
        "üîï <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.</b>\n\n"
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö.",
        parse_mode="HTML"
    ) 