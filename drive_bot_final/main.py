import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from config import settings
from handlers.smart_document_handler import SmartDocumentHandler
from handlers.gdrive_handler import GDriveHandler
from utils.menu import main_menu, back_to_main_menu, document_type_menu
from aiogram.utils.chat_action import ChatActionSender
import mimetypes
from services.smart_document_processor import SmartDocumentProcessor
from services.ai_analyzer import analyze_document_info, check_bilingual_document_consistency, check_bilingual_document_consistency_llm
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import datetime
from utils.validators import validate_file_upload, validate_filename
from utils.rate_limiter import RateLimiter
from logging_config import setup_logging
from middleware.monitoring import MonitoringMiddleware
import io
import re
from typing import Dict, List, Any

setup_logging()

gdrive = GDriveHandler()
smart_handler = SmartDocumentHandler(gdrive)
smart_doc_processor = SmartDocumentProcessor()

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –ø–∞–º—è—Ç–∏)
user_history: Dict[int, List[str]] = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (user_id -> {'file_name', 'file_bytes', 'mime_type'})
pending_files: Dict[int, Dict[str, Any]] = {}

user_folder_stack: Dict[int, List[str]] = {}  # user_id -> [folder_id, ...]

FOLDER_PAGE_SIZE = 5

GEMINI_DAILY_LIMIT = 20
# user_id -> {date: str, count: int}
gemini_usage_counter: Dict[int, Dict[str, int]] = {}

rate_limiter = RateLimiter(requests_per_minute=30)

def add_history(user_id, action, details):
    if not isinstance(user_id, int):
        return
    history = user_history.setdefault(user_id, [])
    history.append(f"{action}: {details}")
    if len(history) > 5:
        history.pop(0)

def get_history(user_id):
    if not isinstance(user_id, int):
        return []
    return user_history.get(user_id, [])

async def on_startup(bot: Bot):
    logging.info("Bot started!")

async def main():
    bot = Bot(token=settings.bot_token)
    dp = Dispatcher()
    dp.message.middleware(MonitoringMiddleware())
    dp.callback_query.middleware(MonitoringMiddleware())

    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        welcome_text = (
            "ü•∞ –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç!\n\n"
            "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º!\n"
            "–ß—Ç–æ–±—ã —è –º–æ–≥ –≤—Å—ë —Ä–∞–∑–ª–æ–∂–∏—Ç—å –ø–æ –ø–æ–ª–æ—á–∫–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑—ã–≤–∞–π —Ñ–∞–π–ª—ã –≤–æ—Ç —Ç–∞–∫:\n"
            "<b>–ü—Ä–∏–Ω—Ü–∏–ø–∞–ª_–ê–≥–µ–Ω—Ç_—Ç–∏–ø_–Ω–æ–º–µ—Ä_–¥–∞—Ç–∞.pdf</b>\n"
            "\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å_–í–∞–ª–∏–µ–Ω—Ç_–î–æ–≥–æ–≤–æ—Ä_1234_01012023.pdf\n"
            "–ê–ª—å—Ñ–∞—Ç—Ä–µ–∫—Å_–ê–≥—Ä–∏–∫–æ_–ü–æ—Ä—É—á–µ–Ω–∏–µ_5678_02022023.pdf\n"
            "\n"
            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É! üíå\n"
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ ‚¨áÔ∏è"
        )
        await message.answer(welcome_text, reply_markup=main_menu(), parse_mode="HTML")

    @dp.callback_query(F.data == "menu_main")
    async def menu_main(call: types.CallbackQuery):
        if call.message:
            await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        await call.answer()

    @dp.callback_query(F.data == "menu_browse")
    async def menu_browse(call: types.CallbackQuery):
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            return
        if user_id is not None:
            user_folder_stack[user_id] = [settings.root_folder_id]
        await browse_folder(call, settings.root_folder_id, 0, is_upload_mode=False)

    async def browse_folder(call, parent_id, page, is_upload_mode=False):
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            return
        # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö parent_id ---
        if not parent_id or parent_id in ('', '.', None):
            logging.warning(f"[user={user_id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π parent_id '{parent_id}', fallback –∫ root_folder_id")
            parent_id = settings.root_folder_id
        stack = user_folder_stack.setdefault(user_id, [settings.root_folder_id])
        if not stack or stack[-1] != parent_id:
            if parent_id == settings.root_folder_id:
                stack.clear()
                stack.append(settings.root_folder_id)
            elif parent_id not in stack:
                stack.append(parent_id)
            else:
                idx = stack.index(parent_id)
                stack[:] = stack[:idx+1]
        folders = await gdrive.list_folders(parent_id=parent_id, limit=1000)
        files = await gdrive.list_files(parent_id=parent_id, limit=1000)
        # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏ –Ω–µ—Ç –ø–∞–ø–æ–∫ ---
        if not folders and len(files) == 1:
            file = files[0]
            file_name = file.get('name')
            file_id = file.get('id')
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=f"üìÑ {file_name}", callback_data=f"download_file_{file_id}")],
                [types.InlineKeyboardButton(text="‚¨ÜÔ∏è –ù–∞–∑–∞–¥", callback_data=f"up_folder_{0 if not is_upload_mode else 1}")],
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]
            ])
            text = f"–í —ç—Ç–æ–π –ø–∞–ø–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª:\n<b>{file_name}</b>"
            if call.message:
                await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
            await call.answer()
            return
        # --- –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –Ω–µ—Ç ---
        if not folders and not files:
            await call.message.answer("–í —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.", reply_markup=back_to_main_menu())
            await call.answer()
            return
        total = len(folders)
        start = page * FOLDER_PAGE_SIZE
        end = start + FOLDER_PAGE_SIZE
        page_folders = folders[start:end]
        kb: list[list[InlineKeyboardButton]] = []
        for f in page_folders:
            kb.append([types.InlineKeyboardButton(text=f["name"], callback_data=f"browse_folder_{f['id']}_{0 if not is_upload_mode else 1}_{page}")])
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        if page == 0 and files:
            for file in files:
                file_name = file.get('name')
                file_id = file.get('id')
                kb.append([
                    types.InlineKeyboardButton(text=f"üìÑ {file_name}", callback_data=f"download_file_{file_id}")
                ])
        if is_upload_mode:
            kb.append([types.InlineKeyboardButton(text="üì• –í—ã–±—Ä–∞—Ç—å —Å—é–¥–∞", callback_data=f"choose_folder_{parent_id}")])
            kb.append([types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", callback_data=f"create_folder_{parent_id}")])
        nav_row = []
        if page > 0:
            nav_row.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"browse_folder_{parent_id}_{0 if not is_upload_mode else 1}_{page-1}"))
        if end < total:
            nav_row.append(types.InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"browse_folder_{parent_id}_{0 if not is_upload_mode else 1}_{page+1}"))
        if nav_row:
            kb.append(nav_row)
        if parent_id != settings.root_folder_id and len(stack) > 1:
            kb.append([types.InlineKeyboardButton(text="‚¨ÜÔ∏è –ù–∞–∑–∞–¥", callback_data=f"up_folder_{0 if not is_upload_mode else 1}")])
        kb.append([types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")])
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}):".format(page+1)
        if call.message:
            await call.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))
        await call.answer()

    @dp.callback_query(lambda c: c.data and c.data.startswith("browse_folder_"))
    async def handle_browse_folder(call: types.CallbackQuery):
        # –ü—Ä–∏–º–µ—Ä callback: browse_folder_{id}_{is_upload_mode}_{page}
        if call is None or not hasattr(call, 'data') or call.data is None:
            await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)
            return
        parts = call.data.split("_")
        if len(parts) < 4:
            await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)
            return
        folder_id = parts[2]  # –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
        try:
            is_upload_mode = bool(int(parts[3]))
        except Exception:
            is_upload_mode = False
        try:
            page = int(parts[4]) if len(parts) > 4 else 0
        except Exception:
            page = 0
        await browse_folder(call, folder_id, page, is_upload_mode=is_upload_mode)

    @dp.callback_query(lambda c: c.data and c.data.startswith("up_folder_"))
    async def handle_up_folder(call: types.CallbackQuery):
        # –ü—Ä–∏–º–µ—Ä callback: up_folder_{is_upload_mode}
        if call is None or not hasattr(call, 'data') or call.data is None:
            await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)
            return
        parts = call.data.split("_")
        try:
            is_upload_mode = bool(int(parts[2])) if len(parts) > 2 else False
        except Exception:
            is_upload_mode = False
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            return
        stack = user_folder_stack.get(user_id, [settings.root_folder_id])
        if len(stack) > 1:
            stack.pop()
        if not stack:
            logging.warning(f"[user={user_id}] –°—Ç–µ–∫ –ø–∞–ø–æ–∫ –ø—É—Å—Ç –ø–æ—Å–ª–µ pop, –¥–æ–±–∞–≤–ª—è—é root_folder_id")
            stack.append(settings.root_folder_id)
        parent_id = stack[-1] if stack else settings.root_folder_id
        # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö parent_id ---
        if not parent_id or parent_id in ('', '.', None):
            logging.warning(f"[user={user_id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π parent_id '{parent_id}' –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥, fallback –∫ root_folder_id")
            parent_id = settings.root_folder_id
        await browse_folder(call, parent_id, 0, is_upload_mode=is_upload_mode)

    @dp.callback_query(F.data == "menu_upload")
    async def menu_upload(call: types.CallbackQuery):
        if call.message:
            await call.message.answer(
                "‚¨ÜÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n\n–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –ø–∞–ø–∫—É –≤—Ä—É—á–Ω—É—é.",
                reply_markup=back_to_main_menu()
            )
        await call.answer()

    @dp.callback_query(F.data == "menu_search")
    async def menu_search(call: types.CallbackQuery):
        if call.message:
            await call.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=back_to_main_menu())
        await call.answer()

    @dp.callback_query(F.data == "menu_history")
    async def menu_history(call: types.CallbackQuery):
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
            return
        history = get_history(user_id)
        text = "\n".join(history) if history else "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
        if call.message:
            await call.message.answer(f"üïë –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:\n{text}", reply_markup=back_to_main_menu())
        await call.answer()

    @dp.callback_query(F.data == "menu_check")
    async def menu_check(call: types.CallbackQuery, state=None):
        if call.message:
            await call.message.answer(
                "üßê –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (PDF, DOCX, JPG –∏ –¥—Ä.).\n\n–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å—É–º–º–∞, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –¥—Ä.) –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏.",
                reply_markup=back_to_main_menu()
            )
        await call.answer()
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            return
        pending_files[user_id] = {"check_mode": True}

    @dp.message(F.media_group_id)
    async def handle_media_group(message: types.Message):
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∞–ª—å–±–æ–º–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ—Ç –∂–µ –ø–∞–π–ø–ª–∞–π–Ω
        if message is not None and (hasattr(message, 'document') and message.document is not None or hasattr(message, 'photo') and message.photo is not None):
            if hasattr(message, 'document') and message.document is not None and hasattr(message.document, 'file_id') and message.document.file_id is not None:
                await handle_document(message)
            elif hasattr(message, 'photo') and message.photo is not None and isinstance(message.photo, list) and message.photo and hasattr(message.photo[-1], 'file_id') and message.photo[-1].file_id is not None:
                await handle_photo(message)

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    async def extract_file_info(message: types.Message):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç file_name, file_bytes, mime_type –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.
        """
        user_id = getattr(getattr(message, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            return None
        bot = getattr(message, 'bot', None)
        if not bot:
            return None
        if message is not None and hasattr(message, 'document') and message.document is not None and hasattr(message.document, 'file_id') and message.document.file_id is not None:
            file_id = message.document.file_id
            file_name = getattr(message.document, 'file_name', None) or f"document_{file_id}"
            file_size = getattr(message.document, 'file_size', None)
            if file_size is None or file_size > settings.max_file_size_mb * 1024 * 1024:
                return None
            mime_type, _ = mimetypes.guess_type(str(file_name))
        elif message is not None and hasattr(message, 'photo') and message.photo is not None and isinstance(message.photo, list) and message.photo and hasattr(message.photo[-1], 'file_id') and message.photo[-1].file_id is not None:
            # –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–æ—Ç–æ
            photo = message.photo[-1]
            file_id = photo.file_id
            file_name = f"photo_{file_id}.jpg"
            mime_type = "image/jpeg"
        else:
            return None
        if not bot or not file_id:
            return None
        file = await bot.get_file(file_id)
        file_path = getattr(file, 'file_path', None)
        if not file_path:
            return None
        file_bytes_obj = await bot.download_file(file_path) if bot and file_path else None
        if file_bytes_obj is None:
            return None
        if hasattr(file_bytes_obj, 'read'):
            if asyncio.iscoroutinefunction(file_bytes_obj.read):
                file_bytes = await file_bytes_obj.read()
            else:
                file_bytes = file_bytes_obj
        else:
            file_bytes = file_bytes_obj
        return {
            'user_id': user_id,
            'file_name': file_name,
            'file_bytes': file_bytes,
            'mime_type': mime_type
        }

    @dp.message(F.document)
    async def handle_document(message: types.Message):
        import time
        user_id = getattr(getattr(message, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=back_to_main_menu())
            return
        if not rate_limiter.is_allowed(user_id):
            reset = rate_limiter.get_reset_time(user_id)
            await message.answer(f"‚è≥ –û–π, —Ç—ã –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–µ–Ω! –î–∞–≤–∞–π —á—É—Ç—å-—á—É—Ç—å –ø–æ–¥–æ–∂–¥—ë–º {reset} —Å–µ–∫, —á—Ç–æ–±—ã —è –Ω–µ —É—Å—Ç–∞–ª üòä", reply_markup=back_to_main_menu())
            return
        start_time = time.time()
        file_info = await extract_file_info(message)
        user_id = file_info['user_id'] if file_info else None
        if not file_info or not isinstance(user_id, int):
            logging.error(f"[user={getattr(message.from_user, 'id', None)}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.")
            await message.answer("–û–π-–æ–π! üò≥ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π...\n–ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ! üíå", reply_markup=back_to_main_menu())
            return
        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: —Ç–æ–ª—å–∫–æ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ ---
        try:
            logging.info(f"[user={user_id}] –ù–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ {file_info['file_name']}")
            text = await smart_doc_processor.extract_text_from_bytes(
                file_info['file_bytes'], file_info['mime_type'], file_info['file_name']
            )
            elapsed = time.time() - start_time
            if elapsed > 10:
                await message.answer(f"‚è≥ –Ø –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º —Ñ–∞–π–ª–æ–º, —á—É—Ç—å-—á—É—Ç—å —Ç–µ—Ä–ø–µ–Ω–∏—è... üê¢", reply_markup=back_to_main_menu())
            logging.info(f"[user={user_id}] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed:.2f} —Å–µ–∫")
        except Exception as e:
            logging.error(f"[user={user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            await message.answer("–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞... üòî –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, —è –ø–æ–º–æ–≥—É!", reply_markup=back_to_main_menu())
            return
        analysis = await analyze_document_info(text, file_info['file_name'])
        analysis_text = (
            f"\n<b>–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Ç–≤–æ—ë–º –¥–æ–∫—É–º–µ–Ω—Ç–µ! üßê‚ú®</b>"
            f"\n‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø–∞–ª: <b>{analysis.get('principal') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n‚Ä¢ –ê–≥–µ–Ω—Ç: <b>{analysis.get('agent') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n‚Ä¢ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: <b>{analysis.get('document_type') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n‚Ä¢ –ù–æ–º–µ—Ä: <b>{analysis.get('number') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n‚Ä¢ –î–∞—Ç–∞: <b>{analysis.get('date') or '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}</b>"
            "\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–æ—Å–∏—Ç—å, —è –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è! üí°"
        )
        await message.answer(analysis_text, parse_mode="HTML")
        try:
            check_result = await check_bilingual_document_consistency_llm(
                text,
                use_gemini=True,
                gemini_api_key=getattr(settings, 'gemini_api_key', None)
            )
        except Exception as e:
            logging.error(f"[user={user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–≤—É—è–∑—ã—á–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (–ò–ò): {e}")
            check_result = {"issues": ["–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤—É—è–∑—ã—á–Ω–æ—Å—Ç–∏ (–ò–ò)"], "recommendations": []}
        if check_result['issues']:
            issues_text = '\n'.join(f"‚ùóÔ∏è {issue}" for issue in check_result['issues'])
        else:
            issues_text = "‚úÖ –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç –≤ –æ–±–µ–∏—Ö —á–∞—Å—Ç—è—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ú–æ–ª–æ–¥–µ—Ü! ü¶Ñ"
        recs_text = '\n'.join(f"üí° {rec}" for rec in check_result['recommendations'])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
        pending_files[user_id] = {**file_info, "ready_for_upload": True}
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ Google Drive ‚ú®", callback_data=f"upload_now_{user_id}")],
            [types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="menu_main")]
        ])
        await message.answer(f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤—É—è–∑—ã—á–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (–ò–ò):</b>\n{issues_text}\n{recs_text}\n\n–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! ü•≥ –•–æ—á–µ—à—å, —è –∑–∞–≥—Ä—É–∂—É —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ Google Drive? –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∏–∂–µ! ‚¨áÔ∏è", parse_mode="HTML", reply_markup=kb)
        return

    @dp.callback_query(lambda c: c.data and c.data.startswith("auto_save_"))
    async def auto_save_to_found_folder(call: types.CallbackQuery):
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int) or user_id not in pending_files:
            logging.error(f"[user={user_id}] –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è auto_save.")
            if call is not None and hasattr(call, 'answer'):
                await call.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.", show_alert=True)
            return
        folder_id = call.data.replace("auto_save_", "") if call.data else None
        if not isinstance(folder_id, str):
            folder_id = None
        file_info = pending_files.pop(user_id)
        try:
            result = await gdrive.upload_file(
                file_info['file_name'],
                file_info['file_bytes'],
                parent_id=folder_id,
                mime_type=file_info['mime_type']
            )
        except Exception as e:
            logging.error(f"[user={user_id}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫—É {folder_id}: {e}")
            if call.message and hasattr(call.message, 'edit_text'):
                await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", reply_markup=back_to_main_menu())
            if call is not None and hasattr(call, 'answer'):
                await call.answer()
            return
        if result['success']:
            add_history(user_id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", file_info['file_name'])
            logging.info(f"[user={user_id}] –§–∞–π–ª {file_info['file_name']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–ø–∫—É {folder_id}")
            if call.message and hasattr(call.message, 'edit_text'):
                await call.message.edit_text(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–ø–∫—É!\n–ò–º—è: {result['file']['name']}\n–°—Å—ã–ª–∫–∞: {result['file'].get('webViewLink', '–Ω–µ—Ç')}", reply_markup=back_to_main_menu())
        else:
            logging.error(f"[user={user_id}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {result['error']}")
            if call.message and hasattr(call.message, 'edit_text'):
                await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result['error']}", reply_markup=back_to_main_menu())
        if call is not None and hasattr(call, 'answer'):
            await call.answer()

    @dp.callback_query(lambda c: c.data == "auto_create_folder")
    async def auto_create_folder(call: types.CallbackQuery):
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int) or user_id not in pending_files:
            logging.error(f"[user={user_id}] –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è auto_create_folder.")
            if call is not None and hasattr(call, 'answer'):
                await call.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.", show_alert=True)
            return
        file_info = pending_files[user_id]
        text = await smart_doc_processor.extract_text_from_bytes(
            file_info['file_bytes'], file_info['mime_type'], file_info['file_name']
        )
        analysis = await analyze_document_info(text, file_info['file_name'])
        principal = analysis.get('principal') or '–ù–æ–≤–∞—è –ø–∞–ø–∫–∞'
        try:
            result = await gdrive.create_folder(principal)
        except Exception as e:
            logging.error(f"[user={user_id}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ '{principal}': {e}")
            if call.message and hasattr(call.message, 'edit_text'):
                await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}", reply_markup=back_to_main_menu())
            if call is not None and hasattr(call, 'answer'):
                await call.answer()
            return
        if result['success']:
            folder_id = result['folder']['id']
            file_info = pending_files.pop(user_id)
            try:
                upload_result = await gdrive.upload_file(
                    file_info['file_name'],
                    file_info['file_bytes'],
                    parent_id=folder_id,
                    mime_type=file_info['mime_type']
                )
            except Exception as e:
                logging.error(f"[user={user_id}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –Ω–æ–≤—É—é –ø–∞–ø–∫—É: {e}")
                if call.message and hasattr(call.message, 'edit_text'):
                    await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", reply_markup=back_to_main_menu())
                if call is not None and hasattr(call, 'answer'):
                    await call.answer()
                return
            if upload_result['success']:
                add_history(user_id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", file_info['file_name'])
                logging.info(f"[user={user_id}] –§–∞–π–ª {file_info['file_name']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –Ω–æ–≤—É—é –ø–∞–ø–∫—É '{principal}'")
                if call.message and hasattr(call.message, 'edit_text'):
                    await call.message.edit_text(f"‚úÖ –ü–∞–ø–∫–∞ '{principal}' —Å–æ–∑–¥–∞–Ω–∞ –∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!\n–ò–º—è: {upload_result['file']['name']}\n–°—Å—ã–ª–∫–∞: {upload_result['file'].get('webViewLink', '–Ω–µ—Ç')}", reply_markup=back_to_main_menu())
            else:
                logging.error(f"[user={user_id}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {upload_result['error']}")
                if call.message and hasattr(call.message, 'edit_text'):
                    await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {upload_result['error']}", reply_markup=back_to_main_menu())
        else:
            logging.error(f"[user={user_id}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {result['error']}")
            if call.message and hasattr(call.message, 'edit_text'):
                await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {result['error']}", reply_markup=back_to_main_menu())
        if call is not None and hasattr(call, 'answer'):
            await call.answer()

    @dp.callback_query(lambda c: c.data == "choose_folder_manual")
    async def choose_folder_manual(call: types.CallbackQuery):
        await menu_upload(call)
        if call is not None and hasattr(call, 'answer'):
            await call.answer()

    @dp.message(F.photo)
    async def handle_photo(message: types.Message):
        user_id = getattr(getattr(message, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            return
        if user_id is not None and not rate_limiter.is_allowed(user_id):
            reset = rate_limiter.get_reset_time(user_id)
            await message.answer(f"‚è≥ –û–π, —Ç—ã –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–µ–Ω! –î–∞–≤–∞–π —á—É—Ç—å-—á—É—Ç—å –ø–æ–¥–æ–∂–¥—ë–º {reset} —Å–µ–∫, —á—Ç–æ–±—ã —è –Ω–µ —É—Å—Ç–∞–ª üòä", reply_markup=back_to_main_menu())
            return
        file_info = await extract_file_info(message)
        user_id = file_info['user_id'] if file_info else None
        if not file_info:
            if message is not None and hasattr(message, 'answer'):
                await message.answer("–û–π-–æ–π! üò≥ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ... –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, —è –ø–æ–º–æ–≥—É! üêæ", reply_markup=back_to_main_menu())
            return
        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: —Ç–æ–ª—å–∫–æ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ ---
        text = await smart_doc_processor.extract_text_from_bytes(
            file_info['file_bytes'], file_info['mime_type'], file_info['file_name']
        )
        preview = (text[:1000] + '...') if text and len(text) > 1000 else text
        if preview:
            await message.answer(f"üìù –í–æ—Ç –∫—É—Å–æ—á–µ–∫ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–∞—à—ë–ª:\n<code>{preview}</code>", parse_mode="HTML")
        analysis = await analyze_document_info(text, file_info['file_name'])
        analysis_text = (
            f"\n<b>–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –≤ —Ç–≤–æ—ë–º –¥–æ–∫—É–º–µ–Ω—Ç–µ! üßê‚ú®</b>"
            f"\n‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø–∞–ª: <b>{analysis.get('principal') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n‚Ä¢ –ê–≥–µ–Ω—Ç: <b>{analysis.get('agent') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n‚Ä¢ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: <b>{analysis.get('document_type') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n‚Ä¢ –ù–æ–º–µ—Ä: <b>{analysis.get('number') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n‚Ä¢ –î–∞—Ç–∞: <b>{analysis.get('date') or '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}</b>"
            "\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–æ—Å–∏—Ç—å, —è –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è! üí°"
        )
        await message.answer(analysis_text, parse_mode="HTML")
        try:
            check_result = await check_bilingual_document_consistency_llm(
                text,
                use_gemini=True,
                gemini_api_key=getattr(settings, 'gemini_api_key', None)
            )
        except Exception as e:
            logging.error(f"[user={user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–≤—É—è–∑—ã—á–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (–ò–ò): {e}")
            check_result = {"issues": ["–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤—É—è–∑—ã—á–Ω–æ—Å—Ç–∏ (–ò–ò)"], "recommendations": []}
        if check_result['issues']:
            issues_text = '\n'.join(f"‚ùóÔ∏è {issue}" for issue in check_result['issues'])
        else:
            issues_text = "‚úÖ –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç –≤ –æ–±–µ–∏—Ö —á–∞—Å—Ç—è—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ú–æ–ª–æ–¥–µ—Ü! ü¶Ñ"
        recs_text = '\n'.join(f"üí° {rec}" for rec in check_result['recommendations'])
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
        pending_files[user_id] = {**file_info, "ready_for_upload": True}
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ Google Drive ‚ú®", callback_data=f"upload_now_{user_id}")],
            [types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="menu_main")]
        ])
        await message.answer(f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤—É—è–∑—ã—á–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (–ò–ò):</b>\n{issues_text}\n{recs_text}\n\n–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! ü•≥ –•–æ—á–µ—à—å, —è –∑–∞–≥—Ä—É–∂—É —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ Google Drive? –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∏–∂–µ! ‚¨áÔ∏è", parse_mode="HTML", reply_markup=kb)
        return

    @dp.callback_query(lambda c: c.data and c.data.startswith("analyze_ai_"))
    async def handle_analyze_ai(call: types.CallbackQuery):
        user_id = call.data.replace("analyze_ai_", "")
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –∏–∑ pending_files)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –∏—â–µ–º –ø–æ user_id –≤ pending_files, –∏–Ω–∞—á–µ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        file_info = pending_files.get(int(user_id))
        if not file_info:
            await call.answer("–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", show_alert=True)
            return
        text = await smart_doc_processor.extract_text_from_bytes(
            file_info['file_bytes'], file_info['mime_type'], file_info['file_name']
        )
        analysis = await analyze_document_info(text, file_info['file_name'], force_llm=True)
        analysis_text = (
            f"\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (–ò–ò):</b>"
            f"\n–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: <b>{analysis.get('contract_number') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: <b>{analysis.get('contract_date') or '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}</b>"
            f"\n–ù–æ–º–µ—Ä –ø–æ—Ä—É—á–µ–Ω–∏—è: <b>{analysis.get('assignment_number') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n–î–∞—Ç–∞ –ø–æ—Ä—É—á–µ–Ω–∏—è: <b>{analysis.get('assignment_date') or '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}</b>"
            f"\n–ì–æ—Ä–æ–¥: <b>{analysis.get('city') or '–Ω–µ –Ω–∞–π–¥–µ–Ω'}</b>"
            f"\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{analysis.get('requisites') or '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}</b>"
        )
        await call.message.answer(analysis_text, parse_mode="HTML")
        await call.answer()

    @dp.callback_query(F.data.startswith("doc_type_"))
    async def choose_doc_type(call: types.CallbackQuery):
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int) or user_id not in pending_files:
            await call.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.", show_alert=True)
            return
        doc_type_data = getattr(call, 'data', None)
        if not doc_type_data or not isinstance(doc_type_data, str) or not doc_type_data.startswith("doc_type_"):
            await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞.", show_alert=True)
            return
        doc_type = doc_type_data.replace("doc_type_", "")
        pending_files[user_id]['doc_type'] = doc_type
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º
        pending_files[user_id]['folder_stack'] = [settings.root_folder_id]
        await browse_folder(call, settings.root_folder_id, 0, is_upload_mode=False)

    @dp.callback_query(lambda c: c.data and isinstance(c.data, str) and c.data.startswith("choose_folder_"))
    async def choose_folder(call: types.CallbackQuery):
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            return
        folder_id = None
        if call is not None and hasattr(call, 'data') and call.data is not None and isinstance(call.data, str):
            if call.data.startswith("choose_folder_"):
                folder_id = call.data.replace("choose_folder_", "")
        if not folder_id:
            if call is not None and hasattr(call, 'answer'):
                await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏.", show_alert=True)
            return
        file_info = pending_files.pop(user_id, None)
        if not file_info:
            if call is not None and hasattr(call, 'answer'):
                await call.answer("–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.", show_alert=True)
            return
        result = await gdrive.upload_file(
            file_info['file_name'],
            file_info['file_bytes'],
            parent_id=folder_id,
            mime_type=file_info['mime_type']
        )
        if result.get('success'):
            add_history(user_id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", file_info['file_name'])
            text = f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive!\n–ò–º—è: {result['file']['name']}\n–°—Å—ã–ª–∫–∞: {result['file'].get('webViewLink', '–Ω–µ—Ç')}"
            if call is not None and hasattr(call, 'message') and call.message and hasattr(call.message, 'edit_text'):
                await call.message.edit_text(text, reply_markup=back_to_main_menu())
        else:
            if call is not None and hasattr(call, 'message') and call.message and hasattr(call.message, 'edit_text'):
                await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.get('error')}", reply_markup=back_to_main_menu())
        if call is not None and hasattr(call, 'answer'):
            await call.answer()

    @dp.callback_query(lambda c: c.data and isinstance(c.data, str) and c.data.startswith("download_file_"))
    async def handle_download_file(call: types.CallbackQuery):
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
            return
        file_id = call.data.replace("download_file_", "") if call.data else None
        if not file_id:
            if call is not None and hasattr(call, 'answer'):
                await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.", show_alert=True)
            return
        file = await gdrive.get_file_metadata(file_id) if file_id else None
        file_bytes = await gdrive.download_file(file_id) if file_id else None
        if not file or not file_bytes:
            if call is not None and hasattr(call, 'answer'):
                await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.", show_alert=True)
            return
        from aiogram.types.input_file import BufferedInputFile
        if call is not None and hasattr(call, 'message') and call.message and hasattr(call.message, 'answer_document'):
            await call.message.answer_document(BufferedInputFile(file_bytes, filename=file['name']))
        if call is not None and hasattr(call, 'answer'):
            await call.answer()

    @dp.message()
    async def handle_search(message: types.Message):
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if hasattr(message, 'document') and message.document is not None:
            await handle_document(message)
            return
        query = message.text.strip() if message and hasattr(message, 'text') and message.text else None
        if not query:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—à—å! –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –µ–≥–æ –¥–ª—è —Ç–µ–±—è ü¶ä", reply_markup=back_to_main_menu())
            return
        user_id = getattr(getattr(message, 'from_user', None), 'id', None)
        if not isinstance(user_id, int):
            return
        results = await gdrive.search_files(query, limit=20)
        if not results:
            await message.answer("–û–π, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å... üòî\n–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª ‚Äî —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! ü¶ä", reply_markup=back_to_main_menu())
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
            return
        if len(results) > 5:
            await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —É—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å! üßê", reply_markup=back_to_main_menu())
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
            return
        buttons = [
            [types.InlineKeyboardButton(text=f"üìÑ {f['name']}", callback_data=f"download_file_{f['id']}")]
            for f in results
        ]
        kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}. –í–æ—Ç –æ–Ω–∏! ü•∞", reply_markup=kb)
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

    async def get_file_path(file):
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ parents
        path: list[str] = []
        parents = file.get('parents', [])
        while parents:
            parent_id = parents[0]
            folder = await gdrive.get_folder_metadata(parent_id)
            if not folder:
                break
            path.insert(0, folder['name'])
            parents = folder.get('parents', [])
        return "/".join(path) if path else ""

    @dp.callback_query(lambda c: c.data and isinstance(c.data, str) and c.data.startswith("upload_now_"))
    async def handle_upload_now(call: types.CallbackQuery):
        user_id = getattr(getattr(call, 'from_user', None), 'id', None)
        if not isinstance(user_id, int) or user_id not in pending_files:
            await call.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.", show_alert=True)
            return
        file_info = pending_files.pop(user_id)
        if not file_info:
            if call is not None and hasattr(call, 'answer'):
                await call.answer("–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.", show_alert=True)
            return
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–∏ (ready_for_upload), –∑–∞–≥—Ä—É–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if file_info.get("ready_for_upload"):
            result = await gdrive.upload_file(
                file_info['file_name'],
                file_info['file_bytes'],
                parent_id=settings.root_folder_id,
                mime_type=file_info['mime_type']
            )
            if result.get('success'):
                add_history(user_id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", file_info['file_name'])
                if call is not None and hasattr(call, 'message') and call.message and hasattr(call.message, 'answer'):
                    await call.message.answer(f"–£—Ä–∞! üéâ –¢–≤–æ–π —Ñ–∞–π–ª —É–∂–µ —É—é—Ç–Ω–æ —É—Å—Ç—Ä–æ–∏–ª—Å—è –≤ Google Drive!\n–ò–º—è: {result['file']['name']}\n–°—Å—ã–ª–∫–∞: {result['file'].get('webViewLink', '–Ω–µ—Ç')}\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ ‚Äî —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! üêæ", reply_markup=back_to_main_menu())
            else:
                if call is not None and hasattr(call, 'message') and call.message and hasattr(call.message, 'answer'):
                    await call.message.answer(f"–û–π! –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª... üò¢\n–û—à–∏–±–∫–∞: {result.get('error')}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, —è –ø–æ–º–æ–≥—É!", reply_markup=back_to_main_menu())
            if call is not None and hasattr(call, 'answer'):
                await call.answer()
            return
        # –û–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        result = await gdrive.upload_file(
            file_info['file_name'],
            file_info['file_bytes'],
            parent_id=settings.root_folder_id,
            mime_type=file_info['mime_type']
        )
        if result.get('success'):
            add_history(user_id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", file_info['file_name'])
            if call is not None and hasattr(call, 'message') and call.message and hasattr(call.message, 'answer'):
                await call.message.answer(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive!\n–ò–º—è: {result['file']['name']}\n–°—Å—ã–ª–∫–∞: {result['file'].get('webViewLink', '–Ω–µ—Ç')}", reply_markup=back_to_main_menu())
        else:
            if call is not None and hasattr(call, 'message') and call.message and hasattr(call.message, 'answer'):
                await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.get('error')}", reply_markup=back_to_main_menu())
        if call is not None and hasattr(call, 'answer'):
            await call.answer()

    @dp.callback_query(lambda c: c.data and c.data.startswith("create_folder_"))
    async def handle_create_folder(call: types.CallbackQuery):
        # –ü—Ä–∏–º–µ—Ä callback: create_folder_{parent_id}
        if call is None or not hasattr(call, 'data') or call.data is None:
            if call is not None and hasattr(call, 'answer'):
                await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏.", show_alert=True)
            return
        parts = call.data.split("_")
        if len(parts) < 3:
            if call is not None and hasattr(call, 'answer'):
                await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏.", show_alert=True)
            return
        parent_id = parts[2]
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
        from aiogram.fsm.context import FSMContext
        from aiogram.fsm.state import State, StatesGroup
        class CreateFolderState(StatesGroup):
            waiting_for_name = State()
        state = getattr(call, 'fsm_context', None)
        if state is not None:
            await state.set_state(CreateFolderState.waiting_for_name)
            if call.message and hasattr(call.message, 'answer'):
                await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:")
            await state.update_data(parent_id=parent_id)
        else:
            result = await gdrive.create_folder("–ù–æ–≤–∞—è –ø–∞–ø–∫–∞", parent_id=parent_id)
            if call.message and hasattr(call.message, 'answer'):
                if result.get('success'):
                    await call.message.answer(f"–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result['folder']['name']}")
                else:
                    await call.message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {result.get('error')}")
        if call is not None and hasattr(call, 'answer'):
            await call.answer()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ (FSM)
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.state import State, StatesGroup
    class CreateFolderState(StatesGroup):
        waiting_for_name = State()
    @dp.message()
    async def process_new_folder_name(message: types.Message, state: FSMContext):
        if state is None:
            return
        current_state = await state.get_state()
        if current_state == CreateFolderState.waiting_for_name.state:
            data = await state.get_data()
            parent_id = data.get('parent_id')
            folder_name = message.text.strip() if message and hasattr(message, 'text') and message.text else None
            if not folder_name:
                if message is not None and hasattr(message, 'answer'):
                    await message.answer("–ò–º—è –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            result = await gdrive.create_folder(folder_name, parent_id=parent_id)
            if message is not None and hasattr(message, 'answer'):
                if result.get('success'):
                    await message.answer(f"–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result['folder']['name']}")
                else:
                    await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {result.get('error')}")
            await state.clear()

    @dp.message(F.document)
    async def handle_document_check(message: types.Message):
        user_id = getattr(getattr(message, 'from_user', None), 'id', None)
        if not isinstance(user_id, int) or user_id in pending_files and pending_files[user_id].get("check_mode"):
            file_info = await extract_file_info(message)
            if not file_info or not file_info.get('file_name') or not file_info.get('file_bytes'):
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.", reply_markup=back_to_main_menu())
                pending_files.pop(user_id, None)
                return
            text = await smart_doc_processor.extract_text_from_bytes(file_info['file_bytes'], file_info['mime_type'], file_info['file_name'])
            suggested_name = extract_suggested_filename_from_content(file_info['file_bytes'])
            await message.answer(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {suggested_name}", reply_markup=back_to_main_menu())
            try:
                check_result = await check_bilingual_document_consistency_llm(text, file_name=file_info['file_name'])
            except Exception as e:
                logging.error(f"[user={user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                check_result = {"issues": ["–û—à–∏–±–∫–∞ –ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–∏"], "recommendations": []}
            if check_result['issues']:
                issues_text = '\n'.join(f"‚ùóÔ∏è {issue}" for issue in check_result['issues'])
                recs_text = '\n'.join(f"üí° {rec}" for rec in check_result['recommendations'])
                await message.answer(f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤—É—è–∑—ã—á–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (–ò–ò):</b>\n{issues_text}\n{recs_text}", parse_mode="HTML")
                pending_files.pop(user_id, None)
                return
        else:
            issues_text = "‚úÖ –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç –≤ –æ–±–µ–∏—Ö —á–∞—Å—Ç—è—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞."
            recs_text = '\n'.join(f"üí° {rec}" for rec in check_result['recommendations'])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
            pending_files[user_id] = {**file_info, "check_mode": False, "ready_for_upload": True}
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ Google Drive", callback_data=f"upload_now_{user_id}")],
                [types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")]
            ])
            await message.answer(f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤—É—è–∑—ã—á–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (–ò–ò):</b>\n{issues_text}\n{recs_text}\n\n–§–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –≤ Google Drive?", parse_mode="HTML", reply_markup=kb)
            return
        await handle_document(message)

    def extract_suggested_filename_from_content(file_bytes: bytes) -> str:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
        # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        return '–î–æ–∫—É–º–µ–Ω—Ç_—Ç–∏–ø_–Ω–æ–º–µ—Ä_–¥–∞—Ç–∞.ext'

    await on_startup(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 