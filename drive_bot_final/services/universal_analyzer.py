import os
import fitz  # PyMuPDF
import pytesseract
from PIL import Image
from pdf2image import convert_from_path
from docx import Document
import re

def extract_text_from_docx(path: str) -> str:
    doc = Document(path)
    return "\n".join(p.text for p in doc.paragraphs)

def extract_text_from_pdf(path: str) -> str:
    doc = fitz.open(path)
    text = ""
    for page in doc:
        text += page.get_text()
    return text

def ocr_pdf_image(path: str) -> str:
    images = convert_from_path(path)
    text = ""
    for image in images:
        text += pytesseract.image_to_string(image, lang="rus+eng")
    return text

def extract_text_from_image(path: str) -> str:
    image = Image.open(path)
    return pytesseract.image_to_string(image, lang="rus+eng")

def split_ru_en_blocks(text: str) -> tuple[str, str]:
    """
    –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±–ª–æ–∫.
    –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –Ω–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
    """
    if "Moscow" in text:
        idx = text.find("Moscow")
        return text[:idx], text[idx:]
    # –ï—Å–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±–ª–æ–∫ –∏–¥—ë—Ç –ø–µ—Ä–≤—ã–º
    if "–ú–æ—Å–∫–≤–∞" in text:
        idx = text.find("–ú–æ—Å–∫–≤–∞")
        return text[idx:], text[:idx]
    return text, text  # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤–µ—Ä–Ω—ë–º –ø–æ–ª–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç

def extract_parameters(text: str) -> dict:
    patterns = {
        "iban": r"\b[A-Z]{2}\d{2}[A-Z0-9]{10,30}\b",
        "swift": r"\b[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?\b",
        "account": r"\b(?:—Å—á–µ—Ç|account)[:\s\-]*([0-9]{8,})\b",
        "contract_number": r"(?:–¥–æ–≥–æ–≤–æ—Ä|contract)[^\d]{0,5}(\d+)",
        "contract_date": r"(?:–æ—Ç|dated)[^\d]{0,5}(\d{2}[./-]\d{2}[./-]\d{4})",
        "amount": r"(?:—Å—É–º–º–∞|amount)[^\d]{0,5}([\d\s.,]+)",
        "principal": r"(?:–ø—Ä–∏–Ω—Ü–∏–ø–∞–ª|principal)[^\n:]*[:\-\s]*([^\n]+)",
        "agent": r"(?:–∞–≥–µ–Ω—Ç|agent)[^\n:]*[:\-\s]*([^\n]+)",
        "number": r"(?:–Ω–æ–º–µ—Ä –ø–æ—Ä—É—á–µ–Ω–∏—è|assignment number)[^\d]{0,5}(\d+)",
        "date": r"(?:–¥–∞—Ç–∞ –ø–æ—Ä—É—á–µ–Ω–∏—è|assignment date)[^\d]{0,5}(\d{2}[./-]\d{2}[./-]\d{4})",
    }
    extracted = {}
    for key, pattern in patterns.items():
        match = re.search(pattern, text, flags=re.IGNORECASE)
        extracted[key] = match.group(1).strip() if match else "–Ω–µ –Ω–∞–π–¥–µ–Ω"
    return extracted

def compare_parameters(ru: dict, en: dict) -> str:
    differences = []
    for key in ru:
        if ru[key] != "–Ω–µ –Ω–∞–π–¥–µ–Ω" and en[key] != "–Ω–µ –Ω–∞–π–¥–µ–Ω":
            if ru[key].lower() != en[key].lower():
                differences.append(f"‚ùóÔ∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{key}': RU='{ru[key]}' EN='{en[key]}'")
    if not differences:
        return "‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç!"
    else:
        return "\n".join(differences)

def analyze_document(path: str) -> str:
    ext = os.path.splitext(path)[1].lower()
    try:
        if ext == ".docx":
            text = extract_text_from_docx(path)
        elif ext == ".pdf":
            text = extract_text_from_pdf(path)
            if not text.strip():
                text = ocr_pdf_image(path)
        elif ext in [".jpg", ".jpeg", ".png"]:
            text = extract_text_from_image(path)
        else:
            return "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞."
        ru_text, en_text = split_ru_en_blocks(text)
        ru_params = extract_parameters(ru_text)
        en_params = extract_parameters(en_text)
        result = "üí° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤—É—è–∑—ã—á–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (–ò–ò):\n"
        result += compare_parameters(ru_params, en_params)
        result += "\n\nüí° DEBUG: –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (RU):\n"
        for k, v in ru_params.items():
            result += f"{k}: {v}\n"
        result += "\nüí° DEBUG: –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EN):\n"
        for k, v in en_params.items():
            result += f"{k}: {v}\n"
        return result
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}" 