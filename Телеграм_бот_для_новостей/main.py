"""
–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ—Ä–∫—Ñ–ª–æ—É ¬´–°—Ç—Ä–∞–Ω–∞ –ì–û–ó¬ª:
1. —Å–æ–±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ sources.yaml
2. –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
3. —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ GPT
4. —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List

from news_parser import crawl          # async -> List[Article]
from sent_storage import filter_new, mark_sent, init_db
from gpt_client import summarize as generate_summary  # async -> str
from models import Article             # dataclass Article

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

# —Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GPT
MAX_CONCURRENT_GPT = 3
# –±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π
MAX_AGE_DAYS = 3

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ì–û–ó-–Ω–æ–≤–æ—Å—Ç–µ–π ---
KEYWORDS = [
    "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±–æ—Ä–æ–Ω–Ω—ã–π –∑–∞–∫–∞–∑", "–≥–æ–∑", "275-—Ñ–∑", "44-—Ñ–∑", "223-—Ñ–∑",
    "–∫–æ–Ω—Ç—Ä–∞–∫—Ç –≥–æ–∑", "–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤",
    "–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –ø–æ –≥–æ–∑", "—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π —É—á–µ—Ç –≥–æ–∑", "–∞—É–¥–∏—Ç–æ—Ä—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
    "—Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–æ–∑", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ", "–±–∞–Ω–∫–æ–≤—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≥–æ–∑",
    "–∫–∞–∑–Ω–∞—á–µ–π—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≥–æ–∑", "–Ω–º—Ü–∫",
    "–∫–æ–Ω—Ç—Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ–∑", "–ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞—Å", "–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
    "–Ω–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –≥–æ–∑", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –≥–æ–∑",
    "—Ç–µ–Ω–¥–µ—Ä—ã –≥–æ–∑", "–∫–æ–Ω–∫—É—Ä—Å—ã –≥–æ–∑", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –≥–æ–∑",
    "—Ä–∞–±–æ—Ç–∞ —Å –≤–æ–µ–Ω–ø—Ä–µ–¥–æ–º", "–º–æ–±–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–Ω–æ–≤–æ—Å—Ç–∏ –æ–±–æ—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏", "–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è –≥–æ–∑", "—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –≥–æ–∑"
]

def contains_keywords(text: str) -> bool:
    text = text.lower()
    return any(k in text for k in KEYWORDS)

async def filter_fresh(articles: List[Article]) -> List[Article]:
    """–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ MAX_AGE_DAYS)."""
    return [a for a in articles if a.published and a.published > datetime.utcnow() - timedelta(days=MAX_AGE_DAYS)]

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–≤–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
CATEGORIES = {
    "gos_it":  ["—Ü–∏—Ñ—Ä", "–≥–∏—Å", "–≥–æ—Å—É—Å–ª—É–≥", "it", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü"],
    "zakon":   ["–∑–∞–∫–æ–Ω", "–ø–æ–ø—Ä–∞–≤–∫", "—Ñ–∑", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"],
    "export":  ["–≤—Ç—Å", "—ç–∫—Å–ø–æ—Ä—Ç", "–∏–∞–ø–æ", "—Ä–æ—Å–æ–±–æ—Ä–æ–Ω—ç–∫—Å–ø"],
    "nauka":   ["–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω", "–æ–ø—ã—Ç–Ω–æ", "–Ω–∏–æ–∫—Ä"],
    "contracts":["–∫–æ–Ω—Ç—Ä–∞–∫—Ç", "–≥–æ—Å–æ–±–æ—Ä–æ–Ω–∑–∞–∫–∞–∑", "–≥–æ–∑", "–º–Ω–æ–≥–æ–º–∏–ª–ª–∏–∞—Ä–¥"],
}

def categorize(a: Article) -> str | None:
    text = (a.title + " " + a.summary).lower()
    for cat, kw in CATEGORIES.items():
        if any(k in text for k in kw):
            return cat
    return None

async def worker_gpt(sem: asyncio.Semaphore, article: Article) -> tuple[Article, str]:
    """–û–±–µ—Ä–Ω—É—Ç—å –≤—ã–∑–æ–≤ GPT —Å–µ–º–∞—Ñ–æ—Ä–æ–º, —á—Ç–æ–±—ã –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∫ Rate-Limit."""
    async with sem:
        summary = await generate_summary(article)
    return article, summary

async def main() -> None:
    logging.info("üöÄ –°—Ç–∞—Ä—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ—Ä–∫—Ñ–ª–æ—É")
    init_db()
    # 1Ô∏è‚É£  —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—å–∏
    articles: List[Article] = await crawl()
    logging.info("–ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %d", len(articles))

    # 2Ô∏è‚É£  —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –¥—É–±–ª—è–º
    fresh = await filter_fresh(articles)
    fresh = filter_new(fresh)
    # 2b: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    fresh = [a for a in fresh if contains_keywords(a.title) or contains_keywords(a.summary)]
    logging.info("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥—É–±–ª–µ–π, –¥–∞—Ç—ã –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: %d", len(fresh))
    if not fresh:
        logging.info("–ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å ‚Äî –≤—ã—Ö–æ–¥–∏–º.")
        return

    # --- –ö–≤–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
    from collections import defaultdict
    import random
    cats = defaultdict(list)
    for art in fresh:
        c = categorize(art)
        if c:
            cats[c].append(art)
    picked = []
    for cat, lst in cats.items():
        lst = sorted(lst, key=lambda a: a.published, reverse=True)[:3]  # —Ç–æ–ø-3 —Å–≤–µ–∂–∏—Ö
        random.shuffle(lst)
        if lst:
            picked.append(lst[0])
    picked = picked[:5]  # –º–∞–∫—Å–∏–º—É–º 5 –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –≤—ã–¥–∞—á–µ
    logging.info("–í—ã–±—Ä–∞–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: %s", {cat: (lst[0].title if lst else None) for cat, lst in cats.items()})
    if not picked:
        logging.info("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
        return

    # 3Ô∏è‚É£  –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ GPT
    sem = asyncio.Semaphore(MAX_CONCURRENT_GPT)
    tasks = [worker_gpt(sem, art) for art in picked]
    done_pairs = await asyncio.gather(*tasks, return_exceptions=False)

    # 4Ô∏è‚É£  –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë –≤ Telegram / e-mail / –∫—É–¥–∞ –Ω—É–∂–Ω–æ
    for art, summary in done_pairs:
        # –ø—Ä–∏–º–µ—Ä: –ø–µ—á–∞—Ç–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ bot.publish(...))
        logging.info(
            "\nüìå %s\n%s\n–ò—Å—Ç–æ—á–Ω–∏–∫: %s\n",
            art.title,
            summary.strip(),
            art.url,
        )
        # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
        mark_sent(art.id, art.published)

    logging.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: %d —Å—Ç–∞—Ç–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", len(done_pairs))

if __name__ == "__main__":
    asyncio.run(main()) 