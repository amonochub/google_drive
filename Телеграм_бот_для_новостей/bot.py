import asyncio
import logging
import os
from dotenv import load_dotenv
load_dotenv()
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, ReplyKeyboardMarkup, KeyboardButton
from news_parser import crawl
from gpt_client import summarize as generate_summary
from sent_storage import mark_sent, init_db
from models import Article
from aiogram.filters import Command
# –ï—Å–ª–∏ –µ—Å—Ç—å image_service:
try:
    from image_service import generate_cover
except ImportError:
    generate_cover = None

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")  # –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# --- In-memory state (user_id -> dict) ---
user_state = {}

# --- –ö–æ–º–∞–Ω–¥—ã ---
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")]],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.", reply_markup=kb)

@router.message(lambda m: m.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
async def pick_news_menu(message: types.Message):
    await message.answer("–ü–æ–¥–±–∏—Ä–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...", reply_markup=None)
    articles = await crawl()
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 —Å–≤–µ–∂–∏—Ö
    articles = sorted(articles, key=lambda a: a.published or 0, reverse=True)[:5]
    user_state[message.from_user.id] = {"articles": articles}
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫
    news_list = "\n".join([
        f"{idx+1}. üì∞ {art.title.strip()}" for idx, art in enumerate(articles)
    ])
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å:\n\n{news_list}")
    # –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ —Å —Ü–∏—Ñ—Ä–∞–º–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=str(idx+1), callback_data=f"pick_{idx}") for idx in range(len(articles))]
        ]
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=kb)

@router.callback_query(lambda c: c.data.startswith("pick_"))
async def pick_news(callback: types.CallbackQuery):
    idx = int(callback.data.split("_")[1])
    state = user_state.get(callback.from_user.id, {})
    articles = state.get("articles", [])
    if idx >= len(articles):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
        return
    article = articles[idx]
    state["selected_article"] = article
    await callback.message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç—å—é...")
    summary = await generate_summary(article)
    state["summary"] = summary
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data="approve_summary")],
            [InlineKeyboardButton(text="–ó–∞–º–µ—á–∞–Ω–∏—è", callback_data="revise_summary")]
        ]
    )
    await callback.message.answer(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è:\n{summary}", reply_markup=kb)

@router.callback_query(lambda c: c.data == "revise_summary")
async def revise_summary(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∫ —Å—Ç–∞—Ç—å–µ:")
    user_state[callback.from_user.id]["awaiting_summary_revision"] = True

@router.message(lambda m: user_state.get(m.from_user.id, {}).get("awaiting_summary_revision"))
async def handle_summary_revision(message: types.Message):
    state = user_state[message.from_user.id]
    article = state["selected_article"]
    remarks = message.text
    await message.answer("–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∞—Ç—å—é...")
    # –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å prompt –¥–ª—è GPT —Å —É—á—ë—Ç–æ–º –∑–∞–º–µ—á–∞–Ω–∏–π
    summary = await generate_summary(article)
    state["summary"] = summary
    state["awaiting_summary_revision"] = False
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data="approve_summary")],
            [InlineKeyboardButton(text="–ó–∞–º–µ—á–∞–Ω–∏—è", callback_data="revise_summary")]
        ]
    )
    await message.answer(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è:\n{summary}", reply_markup=kb)

@router.callback_query(lambda c: c.data == "approve_summary")
async def approve_summary(callback: types.CallbackQuery):
    state = user_state[callback.from_user.id]
    article = state["selected_article"]
    summary = state["summary"]
    if generate_cover:
        await callback.message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        image_bytes = await generate_cover(article.title)
        state["image"] = image_bytes
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data="approve_image")],
                [InlineKeyboardButton(text="–ó–∞–º–µ—á–∞–Ω–∏—è", callback_data="revise_image")]
            ]
        )
        await callback.message.answer_photo(image_bytes, caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", reply_markup=kb)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç image_service, —Å—Ä–∞–∑—É –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await publish_news(callback, article, summary, None)

@router.callback_query(lambda c: c.data == "revise_image")
async def revise_image(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:")
    user_state[callback.from_user.id]["awaiting_image_revision"] = True

@router.message(lambda m: user_state.get(m.from_user.id, {}).get("awaiting_image_revision"))
async def handle_image_revision(message: types.Message):
    state = user_state[message.from_user.id]
    article = state["selected_article"]
    remarks = message.text
    await message.answer("–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    # –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å prompt –¥–ª—è image_service —Å —É—á—ë—Ç–æ–º –∑–∞–º–µ—á–∞–Ω–∏–π
    image_bytes = await generate_cover(article.title)
    state["image"] = image_bytes
    state["awaiting_image_revision"] = False
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", callback_data="approve_image")],
            [InlineKeyboardButton(text="–ó–∞–º–µ—á–∞–Ω–∏—è", callback_data="revise_image")]
        ]
    )
    await message.answer_photo(image_bytes, caption="–û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", reply_markup=kb)

@router.callback_query(lambda c: c.data == "approve_image")
async def approve_image(callback: types.CallbackQuery):
    state = user_state[callback.from_user.id]
    article = state["selected_article"]
    summary = state["summary"]
    image_bytes = state.get("image")
    await publish_news(callback, article, summary, image_bytes)

async def publish_news(callback, article, summary, image_bytes):
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    if image_bytes:
        await bot.send_photo(CHANNEL_ID or callback.from_user.id, image_bytes, caption=summary)
    else:
        await bot.send_message(CHANNEL_ID or callback.from_user.id, summary)
    mark_sent(article.id, article.published)
    await callback.message.answer("–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

async def main():
    init_db()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
